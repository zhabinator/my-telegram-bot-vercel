# -*- coding: utf-8 -*-
import os
import asyncio
import json
import logging
import aiohttp
import re

from http.server import BaseHTTPRequestHandler
from urllib.parse import parse_qs

# –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∏–º–ø–æ—Ä—Ç—ã
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)

# --- –ö–ª—é—á–∏ ---
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
OWM_API_KEY = os.environ.get('OWM_API_KEY')

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
reply_keyboard = [
    [KeyboardButton("–®—É—Ç–∫–∞ üé≤"), KeyboardButton("–ü–æ–≥–æ–¥–∞ üå¶Ô∏è")],
    [KeyboardButton("–û –±–æ—Ç–µ ‚ÑπÔ∏è")]
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –ø–æ–≥–æ–¥—ã ---
GET_CITY = range(1)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã ---
async def fetch_and_send_weather(update: Update, context: ContextTypes.DEFAULT_TYPE, city_name: str):
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    logger.info(f"fetch_and_send_weather: –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è '{city_name}'")
    if not OWM_API_KEY:
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        logger.error("fetch: –ö–ª—é—á OWM –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("–ö–ª—é—á –ø–æ–≥–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=markup)
        return
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    weather_api_url = f"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={OWM_API_KEY}&units=metric&lang=ru"
    logger.info(f"fetch: URL: {weather_api_url}")
    try:
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        async with aiohttp.ClientSession() as session:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤
            async with session.get(weather_api_url) as response:
                # –û—Ç—Å—Ç—É–ø 16 –ø—Ä–æ–±–µ–ª–æ–≤
                if response.status == 401:
                    # –û—Ç—Å—Ç—É–ø 20 –ø—Ä–æ–±–µ–ª–æ–≤
                    logger.error(f"fetch: 401 OWM –¥–ª—è '{city_name}'.")
                    await update.message.reply_text("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–≥–æ–¥—ã.", reply_markup=markup)
                    return
                # –û—Ç—Å—Ç—É–ø 16 –ø—Ä–æ–±–µ–ª–æ–≤
                if response.status == 404:
                    # –û—Ç—Å—Ç—É–ø 20 –ø—Ä–æ–±–µ–ª–æ–≤
                    logger.warning(f"fetch: 404 OWM –¥–ª—è '{city_name}'.")
                    await update.message.reply_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥ '{city_name}'.", reply_markup=markup)
                    return
                # –û—Ç—Å—Ç—É–ø 16 –ø—Ä–æ–±–µ–ª–æ–≤
                response.raise_for_status()
                data = await response.json()
                logger.info(f"fetch: –û—Ç–≤–µ—Ç OWM: {data}")
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        weather_list = data.get("weather", [])
        main_weather = weather_list[0].get("description", "N/A") if weather_list else "N/A"
        main_data = data.get("main", {})
        temp = main_data.get("temp", "N/A")
        feels_like = main_data.get("feels_like", "N/A")
        humidity = main_data.get("humidity", "N/A")
        wind_data = data.get("wind", {})
        wind_speed = wind_data.get("speed", "N/A")
        city_display_name = data.get("name", city_name)
        weather_text = f"–ü–æ–≥–æ–¥–∞ –≤ {city_display_name}:\n–û–ø–∏—Å–∞–Ω–∏–µ: {main_weather.capitalize()}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n–û—â—É—â–∞–µ—Ç—Å—è: {feels_like}¬∞C\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–í–µ—Ç–µ—Ä: {wind_speed} –º/—Å"
        await update.message.reply_text(weather_text, reply_markup=markup)
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    except Exception as e:
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        logger.error(f"fetch: –û—à–∏–±–∫–∞ –¥–ª—è '{city_name}': {e}", exc_info=True)
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.", reply_markup=markup)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    logger.info("–í—ã–∑–≤–∞–Ω–∞ /start")
    user_name = update.effective_user.first_name or "User"
    await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç, {user_name}! –í—ã–±–µ—Ä–∏:', reply_markup=markup)

async def joke_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É"""
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    joke_api_url = "https://official-joke-api.appspot.com/random_joke"
    logger.info(f"–í—ã–∑–≤–∞–Ω–∞ /joke –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ '–®—É—Ç–∫–∞'. –ó–∞–ø—Ä–æ—Å —à—É—Ç–∫–∏ —Å {joke_api_url}")
    try:
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        async with aiohttp.ClientSession() as session:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤
            async with session.get(joke_api_url) as response:
                # –û—Ç—Å—Ç—É–ø 16 –ø—Ä–æ–±–µ–ª–æ–≤
                response.raise_for_status()
                data = await response.json()
                logger.info(f"/joke: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API —à—É—Ç–æ–∫: {data}")
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        setup = data.get("setup")
        punchline = data.get("punchline")
        if setup and punchline:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤
            await update.message.reply_text(f"{setup}\n\n{punchline}", reply_markup=markup)
        else:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤
            logger.error(f"/joke: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å setup/punchline –∏–∑ –æ—Ç–≤–µ—Ç–∞: {data}")
            await update.message.reply_text("–ù–µ–æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à—É—Ç–∫–∏ –ø—Ä–∏—à–µ–ª.", reply_markup=markup)
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    except aiohttp.ClientError as e:
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        logger.error(f"/joke: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}", exc_info=True)
        await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º —à—É—Ç–æ–∫.", reply_markup=markup)
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    except json.JSONDecodeError as e:
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        logger.error(f"/joke: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}", exc_info=True)
        await update.message.reply_text("–°–µ—Ä–≤–µ—Ä —à—É—Ç–æ–∫ –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ.", reply_markup=markup)
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    except Exception as e:
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        logger.error(f"/joke: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True)
        await update.message.reply_text("–û–π, –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —à—É—Ç–∫–∏.", reply_markup=markup)

async def weather_command_direct(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    logger.info("–í—ã–∑–≤–∞–Ω–∞ /weather –ì–æ—Ä–æ–¥")
    city = " ".join(context.args) if context.args else None
    if city:
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        await fetch_and_send_weather(update, context, city)
    else:
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather –ì–æ—Ä–æ–¥", reply_markup=markup)

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    logger.info("–í—ã–∑–≤–∞–Ω–∞ –û –±–æ—Ç–µ")
    await update.message.reply_text("–ë–æ—Ç –¥–ª—è —à—É—Ç–æ–∫ –∏ –ø–æ–≥–æ–¥—ã.", reply_markup=markup)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–≥–æ–¥—ã ---
async def weather_button_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    logger.info("–í—Ö–æ–¥ –≤ –¥–∏–∞–ª–æ–≥ –ø–æ–≥–æ–¥—ã —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É")
    await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É:",
                                    reply_markup=ReplyKeyboardRemove()) # –£–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return GET_CITY # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞

async def received_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    city=update.message.text
    logger.info(f"–î–∏–∞–ª–æ–≥: –ø–æ–ª—É—á–µ–Ω –≥–æ—Ä–æ–¥: {city}")
    await fetch_and_send_weather(update, context, city) # –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –ø–æ–≥–æ–¥—ã
    logger.info("–î–∏–∞–ª–æ–≥ –ø–æ–≥–æ–¥—ã –∑–∞–≤–µ—Ä—à–µ–Ω.")
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ—Å–ª–µ –ø–æ–∫–∞–∑–∞ –ø–æ–≥–æ–¥—ã
    # await update.message.reply_text("–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=markup) # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    logger.info("–î–∏–∞–ª–æ–≥ (–≤–µ—Ä–æ—è—Ç–Ω–æ, –ø–æ–≥–æ–¥—ã) –æ—Ç–º–µ–Ω–µ–Ω –∫–æ–º–∞–Ω–¥–æ–π /cancel")
    await update.message.reply_text('–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    return ConversationHandler.END # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
async def process_one_update(update_data):
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    if not TELEGRAM_TOKEN:
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # --- ConversationHandler ---
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    logger.debug("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ConversationHandler –¥–ª—è –ø–æ–≥–æ–¥—ã...")
    conv_handler_weather = ConversationHandler(
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        entry_points=[MessageHandler(filters.TEXT & filters.Regex(r'^–ü–æ–≥–æ–¥–∞ üå¶Ô∏è$'), weather_button_entry)], # –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ - –∫–Ω–æ–ø–∫–∞ "–ü–æ–≥–æ–¥–∞"
        states={
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤
            GET_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_city)] # –û–∂–∏–¥–∞–µ–º —Ç–µ–∫—Å—Ç (–≥–æ—Ä–æ–¥)
        },
        fallbacks=[CommandHandler('cancel', cancel_conversation)] # –í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞ –ø–æ /cancel
    )
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ ConversationHandler...")
    application.add_handler(conv_handler_weather)
    # --- –ö–û–ù–ï–¶ ConversationHandler ---

    # --- –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ CommandHandler(start)...")
    application.add_handler(CommandHandler("start", start))
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ CommandHandler(joke)...")
    application.add_handler(CommandHandler("joke", joke_command))
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ CommandHandler(weather)...")
    application.add_handler(CommandHandler("weather", weather_command_direct)) # –î–ª—è –ø—Ä—è–º–æ–≥–æ –≤—ã–∑–æ–≤–∞ /weather –ì–æ—Ä–æ–¥
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ MessageHandler(–®—É—Ç–∫–∞)...")
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–®—É—Ç–∫–∞ üé≤$'), joke_command))
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ MessageHandler(–û –±–æ—Ç–µ)...")
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–û –±–æ—Ç–µ ‚ÑπÔ∏è$'), about_command))

    # --- –û—Ç–¥–µ–ª—å–Ω—ã–π /cancel –¥–ª—è –æ–±—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ---
    # –ï—Å–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å, —Ç–æ /cancel –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤—Å–µ–≥–¥–∞, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –≤ –¥–∏–∞–ª–æ–≥–µ
    # application.add_handler(CommandHandler('cancel', cancel_conversation))

    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    logger.info("–í—Å–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    try:
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        logger.debug(f"–ò–Ω–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {update_data.get('update_id')}")
        await application.initialize()
        update = Update.de_json(update_data, application.bot)
        # –õ–æ–≥–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: type={update.message.chat.type}, text='{update.message.text}'")
        elif update.callback_query:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤
            logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: data='{update.callback_query.data}'")
        else:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update}")
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        logger.debug(f"–ó–∞–ø—É—Å–∫ process_update –¥–ª—è {update.update_id}")
        await application.process_update(update) # <- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ shutdown –¥–ª—è {update.update_id}")
        await application.shutdown()
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    except Exception as e:
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ {update_data.get('update_id', 'N/A')}: {e}", exc_info=True)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ shutdown
        if application.initialized:
             # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤
             await application.shutdown()


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Vercel ---
class handler(BaseHTTPRequestHandler): # –ù–∞—á–∞–ª–æ –∫–ª–∞—Å—Å–∞, –Ω–µ—Ç –æ—Ç—Å—Ç—É–ø–∞

    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞ –ø–µ—Ä–µ–¥ def log_message
    def log_message(self, format, *args):
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.info
        logger.info("%s - %s" % (self.address_string(), format % args))

    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞ –ø–µ—Ä–µ–¥ def do_POST
    def do_POST(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ POST-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram."""
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.info
        logger.info("!!! –í—Ö–æ–¥ –≤ do_POST !!!")
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ if not TELEGRAM_TOKEN: (–≠–¢–ê –°–¢–†–û–ö–ê –ë–´–õ–ê –ü–†–û–ë–õ–ï–ú–ù–û–ô)
        if not TELEGRAM_TOKEN:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.error –∏ –¥–∞–ª–µ–µ –≤–Ω—É—Ç—Ä–∏ if
            logger.error("POST: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.send_response(500)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"Token error")
            return # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞

        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ try
        try:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ content_len
            content_len = int(self.headers.get('Content-Length', 0))
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ if content_len == 0:
            if content_len == 0:
                 # –û—Ç—Å—Ç—É–ø 16 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.warning –∏ –¥–∞–ª–µ–µ –≤–Ω—É—Ç—Ä–∏ if
                 logger.warning("POST: –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ")
                 self.send_response(400)
                 self.send_header('Content-type', 'text/plain')
                 self.end_headers()
                 self.wfile.write(b"Empty body")
                 return

            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ body_bytes
            body_bytes = self.rfile.read(content_len)
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ body_json
            body_json = json.loads(body_bytes.decode('utf-8'))
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.info
            logger.info("POST: JSON –ø–æ–ª—É—á–µ–Ω")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ asyncio.run
            asyncio.run(process_one_update(body_json))

            # –û—Ç–≤–µ—á–∞–µ–º Telegram –ù–ï–ú–ï–î–õ–ï–ù–ù–û
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ self.send_response
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"OK")
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.info
            logger.info("POST: –û—Ç–≤–µ—Ç 200 OK")

        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ except json.JSONDecodeError
        except json.JSONDecodeError:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.error –∏ –¥–∞–ª–µ–µ –≤–Ω—É—Ç—Ä–∏ except
            logger.error("POST: –û—à–∏–±–∫–∞ JSON", exc_info=True)
            self.send_response(400)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"Invalid JSON")
            return
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ except Exception
        except Exception as e:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.error –∏ –¥–∞–ª–µ–µ –≤–Ω—É—Ç—Ä–∏ except
            logger.error(f"POST: –û—à–∏–±–∫–∞ –≤ do_POST: {e}", exc_info=True)
            self.send_response(500)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"Internal Error")
            return

    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞ –ø–µ—Ä–µ–¥ def do_GET
    def do_GET(self):
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.info
        logger.info("GET /api/webhook")
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ self.send_response
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b"Bot OK")
        return
# –ö–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞ handler