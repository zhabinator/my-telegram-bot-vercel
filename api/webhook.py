# -*- coding: utf-8 -*-
import os
import asyncio
import json
import logging
import aiohttp # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤
import re # –î–ª—è Regex

from http.server import BaseHTTPRequestHandler
from urllib.parse import parse_qs

# --- !!! –î–û–ë–ê–í–õ–ï–ù–´ –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ !!! ---
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
# ReplyKeyboardRemove –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å, –µ—Å–ª–∏ –∑–∞—Ö–æ—Ç–∏—Ç–µ —É–±–∏—Ä–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
# --------------------------------------
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á–∏ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è ---
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
OWM_API_KEY = os.environ.get('OWM_API_KEY')
# --------------------------------------------

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã ---
# –ö–∞–∂–¥—ã–π –≤–ª–æ–∂–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ - —ç—Ç–æ —Ä—è–¥ –∫–Ω–æ–ø–æ–∫
reply_keyboard = [
    [KeyboardButton("–®—É—Ç–∫–∞ üé≤"), KeyboardButton("–ü–æ–≥–æ–¥–∞ üå¶Ô∏è")],
    [KeyboardButton("–û –±–æ—Ç–µ ‚ÑπÔ∏è")]
]
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)
# resize_keyboard=True - –ø–æ–¥–≥–æ–Ω—è–µ—Ç —Ä–∞–∑–º–µ—Ä –∫–Ω–æ–ø–æ–∫
# one_time_keyboard=False - –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –Ω–µ –∏—Å—á–µ–∑–Ω–µ—Ç –ø–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ –Ω–∞–∂–∞—Ç–∏—è
# -----------------------------------------


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ –∫–Ω–æ–ø–æ–∫ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start - —Ç–µ–ø–µ—Ä—å —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π"""
    user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user_name}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=markup # <-- –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤–º–µ—Å—Ç–µ —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º
    )

async def joke_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏ –∫–æ–º–∞–Ω–¥–æ–π /joke –∏ –∫–Ω–æ–ø–∫–æ–π)"""
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ joke_command –æ—Å—Ç–∞–µ—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ...
    joke_api_url = "https://official-joke-api.appspot.com/random_joke"
    logger.info(f"–í—ã–∑–≤–∞–Ω–∞ /joke –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ '–®—É—Ç–∫–∞'. –ó–∞–ø—Ä–æ—Å —à—É—Ç–∫–∏ —Å {joke_api_url}")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(joke_api_url) as response:
                response.raise_for_status()
                data = await response.json()
                logger.info(f"/joke: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API —à—É—Ç–æ–∫: {data}")
        setup = data.get("setup")
        punchline = data.get("punchline")
        if setup and punchline:
            joke_text = f"{setup}\n\n{punchline}"
            await update.message.reply_text(joke_text, reply_markup=markup) # –°–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        else:
            logger.error(f"/joke: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å setup/punchline –∏–∑ –æ—Ç–≤–µ—Ç–∞: {data}")
            await update.message.reply_text("–ù–µ–æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à—É—Ç–∫–∏ –ø—Ä–∏—à–µ–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=markup)
    except aiohttp.ClientError as e:
        logger.error(f"/joke: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —à—É—Ç–∫–∏: {e}", exc_info=True)
        await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º —à—É—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=markup)
    except json.JSONDecodeError as e:
         logger.error(f"/joke: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç API —à—É—Ç–æ–∫: {e}", exc_info=True)
         await update.message.reply_text("–°–µ—Ä–≤–µ—Ä —à—É—Ç–æ–∫ –æ—Ç–≤–µ—Ç–∏–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=markup)
    except Exception as e:
        logger.error(f"/joke: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à—É—Ç–∫–∏: {e}", exc_info=True)
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —à—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=markup)


async def weather_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞ (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π /weather –ì–æ—Ä–æ–¥)"""
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ weather_command –æ—Å—Ç–∞–µ—Ç—Å—è –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ...
    logger.info("–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /weather")
    if not OWM_API_KEY:
        logger.error("/weather: –ö–ª—é—á OWM_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("–ö–ª—é—á –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–≥–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=markup)
        return
    if not context.args:
        logger.info("/weather: –ö–æ–º–∞–Ω–¥–∞ –≤—ã–∑–≤–∞–Ω–∞ –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.")
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã: /weather –ù–∞–∑–≤–∞–Ω–∏–µ–ì–æ—Ä–æ–¥–∞", reply_markup=markup)
        return
    city_name = " ".join(context.args)
    weather_api_url = f"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={OWM_API_KEY}&units=metric&lang=ru"
    logger.info(f"/weather: –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è '{city_name}' —Å {weather_api_url}")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(weather_api_url) as response:
                if response.status == 401:
                     logger.error(f"/weather: –û—à–∏–±–∫–∞ 401 –æ—Ç OWM API –¥–ª—è –≥–æ—Ä–æ–¥–∞ '{city_name}'. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ API –∫–ª—é—á.")
                     await update.message.reply_text("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–≥–æ–¥—ã.", reply_markup=markup)
                     return
                if response.status == 404:
                    logger.warning(f"/weather: –ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω OWM API (404).")
                    await update.message.reply_text(f"–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ '{city_name}'.", reply_markup=markup)
                    return
                response.raise_for_status()
                data = await response.json()
                logger.info(f"/weather: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OWM API: {data}")
        weather_list = data.get("weather", [])
        main_weather = weather_list[0].get("description", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö") if weather_list else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        main_data = data.get("main", {})
        temp = main_data.get("temp", "N/A")
        feels_like = main_data.get("feels_like", "N/A")
        humidity = main_data.get("humidity", "N/A")
        wind_data = data.get("wind", {})
        wind_speed = wind_data.get("speed", "N/A")
        city_display_name = data.get("name", city_name)
        weather_text = (
            f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city_display_name}:\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {main_weather.capitalize()}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
        )
        await update.message.reply_text(weather_text, reply_markup=markup)
    except aiohttp.ClientError as e:
        logger.error(f"/weather: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –¥–ª—è '{city_name}': {e}", exc_info=True)
        await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ–≥–æ–¥—ã.", reply_markup=markup)
    except json.JSONDecodeError as e:
         logger.error(f"/weather: –û—à–∏–±–∫–∞ JSON –¥–ª—è '{city_name}': {e}", exc_info=True)
         await update.message.reply_text("–°–µ—Ä–≤–µ—Ä –ø–æ–≥–æ–¥—ã –æ—Ç–≤–µ—Ç–∏–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ.", reply_markup=markup)
    except Exception as e:
        logger.error(f"/weather: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è '{city_name}': {e}", exc_info=True)
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –ø–æ–≥–æ–¥–æ–π.", reply_markup=markup)

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–ù–û–ü–ö–ò "–ü–æ–≥–æ–¥–∞ üå¶Ô∏è" ---
async def ask_for_city(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞–ø–æ–º–∏–Ω–∞–µ—Ç, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ–≥–æ–¥—ã"""
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–≥–æ–¥–∞'")
    await update.message.reply_text(
        "–ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: /weather –ù–∞–∑–≤–∞–Ω–∏–µ–ì–æ—Ä–æ–¥–∞",
        reply_markup=markup # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞
    )

# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–ù–û–ü–ö–ò "–û –±–æ—Ç–µ ‚ÑπÔ∏è" ---
async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–û –±–æ—Ç–µ'")
    # –ú–æ–∂–µ—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å —ç—Ç–æ—Ç —Ç–µ–∫—Å—Ç
    await update.message.reply_text(
        "–Ø –ø—Ä–æ—Å—Ç–æ–π –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏. –Ø —É–º–µ—é —Ä–∞—Å—Å–∫–∞–∑—ã–≤–∞—Ç—å —à—É—Ç–∫–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø–æ–≥–æ–¥—É!",
        reply_markup=markup # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–Ω–æ–≤–∞
    )


# --- –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –û–î–ù–û–ì–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
async def process_one_update(update_data):
    if not TELEGRAM_TOKEN:
        logger.error("process_one_update: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # --- !!! –û–ë–ù–û–í–õ–ï–ù–ù–ê–Ø –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í !!! ---
    # –ö–æ–º–∞–Ω–¥—ã
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("joke", joke_command)) # –û—Å—Ç–∞–≤–ª—è–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    application.add_handler(CommandHandler("weather", weather_command)) # –û—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ (—Ä–µ–∞–≥–∏—Ä—É–µ–º –Ω–∞ —Ç–æ—á–Ω—ã–π —Ç–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏)
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º filters.Regex —Å ^ –∏ $ –¥–ª—è —Ç–æ—á–Ω–æ–≥–æ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ –∫–Ω–æ–ø–∫–∏
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–®—É—Ç–∫–∞ üé≤$'), joke_command))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–ü–æ–≥–æ–¥–∞ üå¶Ô∏è$'), ask_for_city))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–û –±–æ—Ç–µ ‚ÑπÔ∏è$'), about_command))

    # –í–∞–∂–Ω–æ: –ù–ï –¥–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π,
    # —á—Ç–æ–±—ã –æ–Ω –Ω–µ –º–µ—à–∞–ª –∫–Ω–æ–ø–∫–∞–º –∏ –∫–æ–º–∞–Ω–¥–∞–º. –ï—Å–ª–∏ –Ω—É–∂–µ–Ω echo, –¥–æ–±–∞–≤–ª—è—Ç—å –µ–≥–æ –ü–û–°–õ–ï –≤—Å–µ—Ö.
    # application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, echo))
    # -----------------------------------------------------

    logger.info("process_one_update: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã (—Å –∫–Ω–æ–ø–∫–∞–º–∏ ReplyKeyboard).")

    try:
        await application.initialize()
        update = Update.de_json(update_data, application.bot)

        if update.message:
            logger.info(f"process_one_update: –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: type={update.message.chat.type}, text='{update.message.text}'")
        elif update.callback_query:
             logger.info(f"process_one_update: –ü–æ–ª—É—á–µ–Ω callback_query: data='{update.callback_query.data}'")
        else:
             logger.info(f"process_one_update: –ü–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update}")

        await application.process_update(update)
        await application.shutdown()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update_data.get('update_id', 'N/A')}: {e}", exc_info=True)
        if application.initialized:
            try:
                await application.shutdown()
            except Exception as shutdown_e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ shutdown –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏: {shutdown_e}", exc_info=True)


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Vercel (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class handler(BaseHTTPRequestHandler):
    # ... (log_message, do_POST, do_GET –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    def log_message(self, format, *args):
          logger.info("%s - %s" % (self.address_string(), format%args))
    def do_POST(self):
        logger.info("!!! –í—Ö–æ–¥ –≤ do_POST !!!")
        if not TELEGRAM_TOKEN: logger.error("POST-–∑–∞–ø—Ä–æ—Å: –¢–æ–∫–µ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω."); self.send_response(500); self.end_headers(); self.wfile.write(b"Bot token not configured"); return
        try:
            content_len = int(self.headers.get('Content-Length', 0))
            if content_len == 0: logger.warning("POST-–∑–∞–ø—Ä–æ—Å: –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ."); self.send_response(400); self.end_headers(); self.wfile.write(b"Empty request body"); return
            body_bytes = self.rfile.read(content_len)
            body_json = json.loads(body_bytes.decode('utf-8'))
            logger.info("POST-–∑–∞–ø—Ä–æ—Å: JSON –ø–æ–ª—É—á–µ–Ω –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω.")
            asyncio.run(process_one_update(body_json))
            self.send_response(200); self.send_header('Content-type', 'text/plain'); self.end_headers(); self.wfile.write(b"OK"); logger.info("POST-–∑–∞–ø—Ä–æ—Å: –û—Ç–≤–µ—Ç 200 OK –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        except json.JSONDecodeError: logger.error("POST-–∑–∞–ø—Ä–æ—Å: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON.", exc_info=True); self.send_response(400); self.end_headers(); self.wfile.write(b"Invalid JSON received"); return
        except Exception as e: logger.error(f"POST-–∑–∞–ø—Ä–æ—Å: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ do_POST: {e}", exc_info=True); self.send_response(500); self.end_headers(); self.wfile.write(b"Internal Server Error occurred"); return
    def do_GET(self): logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω GET-–∑–∞–ø—Ä–æ—Å –∫ /api/webhook"); self.send_response(200); self.send_header('Content-type', 'text/plain'); self.end_headers(); self.wfile.write(b"Hello! Telegram Bot webhook endpoint is active."); return