# -*- coding: utf-8 -*-
import os
import asyncio
import json
import logging
import aiohttp
import re

from http.server import BaseHTTPRequestHandler
from urllib.parse import parse_qs

# --- !!! –ù–£–ñ–ù–´ –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ –î–õ–Ø ConversationHandler !!! ---
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler # <-- –ì–ª–∞–≤–Ω—ã–π –∏–º–ø–æ—Ä—Ç –¥–ª—è –¥–∏–∞–ª–æ–≥–æ–≤
)
# -----------------------------------------------------------

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# --- –ö–ª—é—á–∏ ---
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
OWM_API_KEY = os.environ.get('OWM_API_KEY')

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
reply_keyboard = [
    [KeyboardButton("–®—É—Ç–∫–∞ üé≤"), KeyboardButton("–ü–æ–≥–æ–¥–∞ üå¶Ô∏è")],
    [KeyboardButton("–û –±–æ—Ç–µ ‚ÑπÔ∏è")]
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

# --- –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è ConversationHandler ---
GET_CITY = range(1) # –û–¥–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞
# ----------------------------------------------------


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–≥–æ–¥—ã ---
async def fetch_and_send_weather(update: Update, context: ContextTypes.DEFAULT_TYPE, city_name: str):
    """–ü–æ–ª—É—á–∞–µ—Ç –ø–æ–≥–æ–¥—É –¥–ª—è city_name –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    logger.info(f"fetch_and_send_weather: –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è '{city_name}'")
    if not OWM_API_KEY:
        logger.error("fetch_and_send_weather: –ö–ª—é—á OWM_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await update.message.reply_text("–ö–ª—é—á –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –ø–æ–≥–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=markup)
        return

    weather_api_url = f"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={OWM_API_KEY}&units=metric&lang=ru"
    logger.info(f"fetch_and_send_weather: URL –∑–∞–ø—Ä–æ—Å–∞: {weather_api_url}")

    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(weather_api_url) as response:
                if response.status == 401:
                     logger.error(f"fetch_and_send_weather: –û—à–∏–±–∫–∞ 401 –æ—Ç OWM API –¥–ª—è '{city_name}'.")
                     await update.message.reply_text("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ –ø–æ–≥–æ–¥—ã.", reply_markup=markup)
                     return
                if response.status == 404:
                    logger.warning(f"fetch_and_send_weather: –ì–æ—Ä–æ–¥ '{city_name}' –Ω–µ –Ω–∞–π–¥–µ–Ω OWM API (404).")
                    await update.message.reply_text(f"–ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ –≥–æ—Ä–æ–¥ '{city_name}'.", reply_markup=markup)
                    return
                response.raise_for_status()
                data = await response.json()
                logger.info(f"fetch_and_send_weather: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç OWM API: {data}")

        weather_list = data.get("weather", [])
        main_weather = weather_list[0].get("description", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö") if weather_list else "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö"
        main_data = data.get("main", {})
        temp = main_data.get("temp", "N/A")
        feels_like = main_data.get("feels_like", "N/A")
        humidity = main_data.get("humidity", "N/A")
        wind_data = data.get("wind", {})
        wind_speed = wind_data.get("speed", "N/A")
        city_display_name = data.get("name", city_name)

        weather_text = (
            f"–ü–æ–≥–æ–¥–∞ –≤ –≥–æ—Ä–æ–¥–µ {city_display_name}:\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {main_weather.capitalize()}\n"
            f"–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n"
            f"–û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫: {feels_like}¬∞C\n"
            f"–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"–°–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {wind_speed} –º/—Å"
        )
        await update.message.reply_text(weather_text, reply_markup=markup) # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É

    except aiohttp.ClientError as e:
        logger.error(f"fetch_and_send_weather: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –¥–ª—è '{city_name}': {e}", exc_info=True)
        await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º –ø–æ–≥–æ–¥—ã.", reply_markup=markup)
    except json.JSONDecodeError as e:
         logger.error(f"fetch_and_send_weather: –û—à–∏–±–∫–∞ JSON –¥–ª—è '{city_name}': {e}", exc_info=True)
         await update.message.reply_text("–°–µ—Ä–≤–µ—Ä –ø–æ–≥–æ–¥—ã –æ—Ç–≤–µ—Ç–∏–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ.", reply_markup=markup)
    except Exception as e:
        logger.error(f"fetch_and_send_weather: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –¥–ª—è '{city_name}': {e}", exc_info=True)
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ —Å –ø–æ–≥–æ–¥–æ–π.", reply_markup=markup)
# --- –ö–æ–Ω–µ—Ü –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ ---


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π (–≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞) ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    user_name = update.effective_user.first_name or "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user_name}! –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:',
        reply_markup=markup
    )

async def joke_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —à—É—Ç–∫—É."""
    # ... (–∫–æ–¥ —Ñ—É–Ω–∫—Ü–∏–∏ joke_command –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–π –≤–µ—Ä—Å–∏–∏) ...
    joke_api_url = "https://official-joke-api.appspot.com/random_joke"
    logger.info(f"–í—ã–∑–≤–∞–Ω–∞ /joke –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ '–®—É—Ç–∫–∞'. –ó–∞–ø—Ä–æ—Å —à—É—Ç–∫–∏ —Å {joke_api_url}")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(joke_api_url) as response:
                response.raise_for_status()
                data = await response.json()
                logger.info(f"/joke: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API —à—É—Ç–æ–∫: {data}")
        setup = data.get("setup"); punchline = data.get("punchline")
        if setup and punchline: await update.message.reply_text(f"{setup}\n\n{punchline}", reply_markup=markup)
        else: logger.error(f"/joke: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å setup/punchline: {data}"); await update.message.reply_text("–ù–µ–æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à—É—Ç–∫–∏.", reply_markup=markup)
    except Exception as e: logger.error(f"/joke: –û—à–∏–±–∫–∞: {e}", exc_info=True); await update.message.reply_text("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É.", reply_markup=markup)


async def weather_command_direct(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä—è–º—É—é –∫–æ–º–∞–Ω–¥—É /weather –ì–æ—Ä–æ–¥."""
    logger.info("–í—ã–∑–≤–∞–Ω–∞ –ø—Ä—è–º–∞—è –∫–æ–º–∞–Ω–¥–∞ /weather –ì–æ—Ä–æ–¥")
    if not context.args:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather –ù–∞–∑–≤–∞–Ω–∏–µ–ì–æ—Ä–æ–¥–∞", reply_markup=markup)
        return
    city_name = " ".join(context.args)
    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
    await fetch_and_send_weather(update, context, city_name)

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
     """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ."""
     logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–û –±–æ—Ç–µ'")
     await update.message.reply_text("–Ø –±–æ—Ç –¥–ª—è —à—É—Ç–æ–∫ –∏ –ø–æ–≥–æ–¥—ã!", reply_markup=markup)


# --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è ConversationHandler (–ü–æ–≥–æ–¥–∞ –ø–æ –∫–Ω–æ–ø–∫–µ) ---

async def weather_button_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ù–∞—á–∏–Ω–∞–µ—Ç –¥–∏–∞–ª–æ–≥ –ø–æ–≥–æ–¥—ã –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏."""
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–≥–æ–¥–∞', –≤—Ö–æ–¥ –≤ –¥–∏–∞–ª–æ–≥.")
    await update.message.reply_text(
        "–•–æ—Ä–æ—à–æ! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É:",
        reply_markup=ReplyKeyboardRemove() # –£–±–∏—Ä–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –Ω–∞ –≤—Ä–µ–º—è –≤–≤–æ–¥–∞
    )
    return GET_CITY # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ä–æ–¥–∞

async def received_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞."""
    city_name = update.message.text
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–≤–µ–ª –≥–æ—Ä–æ–¥: '{city_name}'")

    # –í—ã–∑—ã–≤–∞–µ–º –æ–±—â—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
    await fetch_and_send_weather(update, context, city_name)

    # –ó–∞–≤–µ—Ä—à–∞–µ–º –¥–∏–∞–ª–æ–≥
    logger.info(f"–î–∏–∞–ª–æ–≥ –ø–æ–≥–æ–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∑–∞–≤–µ—Ä—à–µ–Ω.")
    return ConversationHandler.END # –í—ã—Ö–æ–¥ –∏–∑ –¥–∏–∞–ª–æ–≥–∞

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω—è–µ—Ç —Ç–µ–∫—É—â–∏–π –¥–∏–∞–ª–æ–≥."""
    user_id = update.effective_user.id
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–º–µ–Ω–∏–ª –¥–∏–∞–ª–æ–≥.")
    await update.message.reply_text(
        '–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.',
        reply_markup=markup # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    )
    return ConversationHandler.END
# --- –ö–æ–Ω–µ—Ü —Ñ—É–Ω–∫—Ü–∏–π –¥–ª—è ConversationHandler ---


# --- –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –û–î–ù–û–ì–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
async def process_one_update(update_data):
    if not TELEGRAM_TOKEN: logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!"); return

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # --- !!! –°–û–ó–î–ê–ï–ú ConversationHandler –î–õ–Ø –ü–û–ì–û–î–´ –ü–û –ö–ù–û–ü–ö–ï !!! ---
    conv_handler_weather = ConversationHandler(
        entry_points=[MessageHandler(filters.TEXT & filters.Regex(r'^–ü–æ–≥–æ–¥–∞ üå¶Ô∏è$'), weather_button_entry)],
        states={
            GET_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_city)]
        },
        fallbacks=[CommandHandler('cancel', cancel_conversation)]
    )
    # -------------------------------------------------------------

    # --- !!! –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –í–°–ï–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í !!! ---
    application.add_handler(conv_handler_weather) # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("joke", joke_command))
    application.add_handler(CommandHandler("weather", weather_command_direct)) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /weather –ì–æ—Ä–æ–¥
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–®—É—Ç–∫–∞ üé≤$'), joke_command))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–û –±–æ—Ç–µ ‚ÑπÔ∏è$'), about_command))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /cancel (–µ—Å–ª–∏ –æ–Ω –Ω–µ —É–∫–∞–∑–∞–Ω –≤ fallbacks, –æ–Ω –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–µ—Ç –≤–Ω—É—Ç—Ä–∏ –¥–∏–∞–ª–æ–≥–∞)
    application.add_handler(CommandHandler('cancel', cancel_conversation))
    # ------------------------------------------

    logger.info("process_one_update: –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã (–≤–∫–ª—é—á–∞—è ConversationHandler).")

    try:
        await application.initialize()
        update = Update.de_json(update_data, application.bot)
        await application.process_update(update)
        await application.shutdown()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {update_data.get('update_id', 'N/A')}: {e}", exc_info=True)
        if application.initialized: await application.shutdown()

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Vercel (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class handler(BaseHTTPRequestHandler):
    def log_message(self, format, *args): logger.info("%s - %s" % (self.address_string(), format % args))
    def do_POST(self):
        logger.info("!!! –í—Ö–æ–¥ –≤ do_POST !!!")
        if not TELEGRAM_TOKEN: logger.error("POST: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"); self.send_response(500); self.end_headers(); self.wfile.write(b"Token error"); return
        try:
            content_len = int(self.headers.get('Content-Length', 0)); body_bytes = self.rfile.read(content_len)
            if content_len == 0: logger.warning("POST: –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ"); self.send_response(400); self.end_headers(); self.wfile.write(b"Empty body"); return
            body_json = json.loads(body_bytes.decode('utf-8')); logger.info("POST: JSON –ø–æ–ª—É—á–µ–Ω")
            asyncio.run(process_one_update(body_json))
            self.send_response(200); self.send_header('Content-type', 'text/plain'); self.end_headers(); self.wfile.write(b"OK"); logger.info("POST: –û—Ç–≤–µ—Ç 200 OK")
        except json.JSONDecodeError: logger.error("POST: –û—à–∏–±–∫–∞ JSON", exc_info=True); self.send_response(400); self.end_headers(); self.wfile.write(b"Invalid JSON"); return
        except Exception as e: logger.error(f"POST: –û—à–∏–±–∫–∞ –≤ do_POST: {e}", exc_info=True); self.send_response(500); self.end_headers(); self.wfile.write(b"Internal Error"); return
    def do_GET(self): logger.info("GET /api/webhook"); self.send_response(200); self.send_header('Content-type', 'text/plain'); self.end_headers(); self.wfile.write(b"Bot OK"); return