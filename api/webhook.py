# -*- coding: utf-8 -*-
import os
import asyncio
import json
import logging
from typing import List

# --- –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ô –ò–ú–ü–û–†–¢ ---
from vercel_kv import KV # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ö–õ–ê–°–°
# --------------------------

from http.server import BaseHTTPRequestHandler

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO # –í–æ–∑–≤—Ä–∞—â–∞–µ–º INFO
)
logger = logging.getLogger(__name__)
logging.getLogger("vercel_kv").setLevel(logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)

# --- –ö–ª—é—á Telegram ---
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
if not TELEGRAM_TOKEN:
    logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# --- –°–û–ó–î–ê–ï–ú –≠–ö–ó–ï–ú–ü–õ–Ø–† KV –ö–õ–ò–ï–ù–¢–ê ---
kv_client = KV() # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ–¥–∏–Ω —Ä–∞–∑
# ------------------------------------

# --- –°–ø–∏—Å–æ–∫ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π ---
congratulations_list: List[str] = [
    "–ë—É–¥—Ç—å –≤—Å–µ–≥–¥–∞ very sugarüéâ", "–¢—ã - –ª–æ–≤—É—à–∫–∞ –¥–ª—è –º—É–∂—Å–∫–æ–≥–æ –í–∞—É! üíñ", "–ì–ª–∞–≤–Ω–∞—è —Å—Ç–∞—Ç—å—è –≤ –∫–æ–¥–µ–∫—Å–µ –∫—Ä–∞—Å–æ—Ç—ã ü•≥",
    "–¢—ã –¥–µ–ª–∞–µ—à—å –∞–ø–ø–µ—Ç–∏—Ç –ø—Ä–∏—è—Ç–Ω–µ–µ ‚ú®", "–ê—Ä–æ–º–∞—Ç–Ω–æ–≥–æ –¥–Ω—è, –º–∏–ª–µ–¥–∏ü•∞", "–†—è–¥–æ–º —Å –≤–∞–º–∏ –Ω–µ —Ö–æ—á–µ—Ç—Å—è –º–æ—Ä–≥–∞—Ç—åü•∞",
    "–ï—Å–ª–∏ –∫—Ä–∞—Å–æ—Ç–∞ —Å–ø–∞—Å–µ—Ç –º–∏—Ä, —Ç–æ –≤—Å—è –Ω–∞–¥–µ–∂–¥–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–±—è!ü•∞", "–¶–µ–ª—É–µ–º —Ç–æ—Ç –¥–µ–Ω—å, –∫–æ–≥–¥–∞ —Ç—ã —Ä–æ–¥–∏–ª–∞—Å—å!üíñ",
    "–ú–æ—Ä–µ —É–¥–∞—á–∏ –∏ –¥–∞—á–∏ —É –º–æ—Ä—è! üíñ",
]

# --- –°–ø–∏—Å–æ–∫ URL –∫–∞—Ä—Ç–∏–Ω–æ–∫ ---
image_urls: List[str] = [
    "https://i.imgur.com/P14dISY.jpeg",
    "https://i.imgur.com/SrFv5sw.jpeg",
    "https://i.imgur.com/UjL4C4Q.jpeg",
    "https://i.imgur.com/exIooZ0.jpeg",
    "https://i.imgur.com/Hqe3MOI.jpeg",
    "https://i.imgur.com/xEsRHUU.jpeg",
]
if not image_urls: logger.warning("–°–ø–∏—Å–æ–∫ image_urls –ø—É—Å—Ç!")

# --- ID –ê—É–¥–∏–æ—Ñ–∞–π–ª–∞ ---
HAPPY_BIRTHDAY_AUDIO_ID = "CQACAgIAAxkBAAEd2Z9n99j8nLv08edj8YC2UjLcN_AlNQAC1nEAAm2gwEuxk0AF1ieRlDYE"

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
reply_keyboard = [
    [KeyboardButton("–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º ‚ù§Ô∏è"), KeyboardButton("–°–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤–æ ‚ú®")],
    [KeyboardButton("–•–µ–ø–ø–∏ –±–µ–∑–¥–µ–π üéÇ")]
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å –ò–°–ü–†–ê–í–õ–ï–ù–ù–´–ú –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º KV ---
async def get_next_item(user_id: int, list_key: str, item_list: List[str]) -> str:
    if not item_list: logger.warning(f"–°–ø–∏—Å–æ–∫ –¥–ª—è –∫–ª—é—á–∞ '{list_key}' –ø—É—Å—Ç."); return "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç."

    kv_key = f"next_idx:{user_id}:{list_key}"
    logger.debug(f"KV –∫–ª—é—á: {kv_key}")
    current_index: int = 0
    item_to_return: str = item_list[0]

    try:
        logger.debug(f"KV –ß—Ç–µ–Ω–∏–µ: {kv_key}...")
        # --- –ò–°–ü–û–õ–¨–ó–£–ï–ú –≠–ö–ó–ï–ú–ü–õ–Ø–† kv_client ---
        stored_value = await kv_client.get(kv_key)
        # ------------------------------------
        logger.debug(f"KV –ü—Ä–æ—á–∏—Ç–∞–Ω–æ: {kv_key} = {stored_value} (—Ç–∏–ø: {type(stored_value)})")

        if isinstance(stored_value, int): current_index = stored_value
        elif isinstance(stored_value, str) and stored_value.isdigit(): current_index = int(stored_value)
        else: logger.info(f"KV –ò–Ω–¥–µ–∫—Å –Ω–µ –Ω–∞–π–¥–µ–Ω/–Ω–µ —á–∏—Å–ª–æ –¥–ª—è {kv_key}, –Ω–∞—á–∏–Ω–∞–µ–º —Å 0."); current_index = 0

        if not (0 <= current_index < len(item_list)):
            logger.warning(f"KV –ò–Ω–¥–µ–∫—Å {current_index} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è {kv_key}. –°–±—Ä–æ—Å –Ω–∞ 0.")
            current_index = 0

        item_to_return = item_list[current_index]
        logger.info(f"KV –í—ã–±—Ä–∞–Ω –∏–Ω–¥–µ–∫—Å {current_index} –¥–ª—è {kv_key}.")

    except Exception as e:
        logger.error(f"KV –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {kv_key}: {e}", exc_info=True)
        current_index = 0
        item_to_return = item_list[0]

    next_index = (current_index + 1) % len(item_list)
    try:
        logger.debug(f"KV –ó–∞–ø–∏—Å—å: {kv_key} = {next_index}...")
        # --- –ò–°–ü–û–õ–¨–ó–£–ï–ú –≠–ö–ó–ï–ú–ü–õ–Ø–† kv_client ---
        await kv_client.set(kv_key, next_index)
        # ------------------------------------
        logger.info(f"KV –°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–ª–µ–¥. –∏–Ω–¥–µ–∫—Å {next_index} –¥–ª—è {kv_key}")
    except Exception as e:
        logger.error(f"KV –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ {kv_key}: {e}", exc_info=True)

    return item_to_return

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): # ... (–∫–æ–¥ start) ...
async def syrup_heart_handler(update: Update, context: ContextTypes.DEFAULT_TYPE): # ... (–∫–æ–¥ syrup_heart_handler) ...
async def beauty_image_handler(update: Update, context: ContextTypes.DEFAULT_TYPE): # ... (–∫–æ–¥ beauty_image_handler) ...
async def happy_birthday_handler(update: Update, context: ContextTypes.DEFAULT_TYPE): # ... (–∫–æ–¥ happy_birthday_handler) ...

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
async def process_one_update(update_data): # ... (–∫–æ–¥ process_one_update) ...

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Vercel (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class handler(BaseHTTPRequestHandler): # ... (–∫–æ–¥ handler) ...
    def do_POST(self): # ... (–∫–æ–¥ do_POST) ...
    def do_GET(self): # ... (–∫–æ–¥ do_GET) ...