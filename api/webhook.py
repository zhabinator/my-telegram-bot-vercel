# -*- coding: utf-8 -*-
import os
import asyncio
import json
import logging
import random # –î–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è

from http.server import BaseHTTPRequestHandler

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)

# --- –ö–ª—é—á Telegram ---
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')

# --- –°–ø–∏—Å–æ–∫ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π (–° –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –ó–ê–ü–Ø–¢–û–ô!) ---
congratulations_list = [
    "–ë—É–¥—Ç—å –≤—Å–µ–≥–¥–∞ very sugarüéâ",
    "–¢—ã - –ª–æ–≤—É—à–∫–∞ –¥–ª—è –º—É–∂—Å–∫–æ–≥–æ –í–∞—É! üíñ",
    "–ì–ª–∞–≤–Ω–∞—è —Å—Ç–∞—Ç—å—è –≤ –∫–æ–¥–µ–∫—Å–µ –∫—Ä–∞—Å–æ—Ç—ã ü•≥",
    "–¢—ã –¥–µ–ª–∞–µ—à—å –∞–ø–ø–µ—Ç–∏—Ç –ø—Ä–∏—è—Ç–Ω–µ–µ ‚ú®",
    "–ê—Ä–æ–º–∞—Ç–Ω–æ–≥–æ –¥–Ω—è, –º–∏–ª–µ–¥–∏ü•∞",
    "–†—è–¥–æ–º —Å –≤–∞–º–∏ –Ω–µ —Ö–æ—á–µ—Ç—Å—è –º–æ—Ä–≥–∞—Ç—åü•∞",
    "–ï—Å–ª–∏ –∫—Ä–∞—Å–æ—Ç–∞ —Å–ø–∞—Å–µ—Ç –º–∏—Ä, —Ç–æ –≤—Å—è –Ω–∞–¥–µ–∂–¥–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–±—è!ü•∞", # <-- –ò–°–ü–†–ê–í–õ–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω–∞ –∑–∞–ø—è—Ç–∞—è
    "–¶–µ–ª—É–µ–º —Ç–æ—Ç –¥–µ–Ω—å, –∫–æ–≥–¥–∞ —Ç—ã —Ä–æ–¥–∏–ª–∞—Å—å!üíñ",
    "–ú–æ—Ä–µ —É–¥–∞—á–∏ –∏ –¥–∞—á–∏ —É –º–æ—Ä—è! üíñ",
]

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
reply_keyboard = [
    [KeyboardButton("–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º ‚ù§Ô∏è")]
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É."""
    logger.info("–í—ã–∑–≤–∞–Ω–∞ /start")
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –ì–æ—Ç–æ–≤ –ø–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ? ‚ù§Ô∏è",
        parse_mode='HTML',
        reply_markup=markup
    )

async def syrup_heart_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏."""
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º'")
    random_congrats = random.choice(congratulations_list)
    await update.message.reply_text(random_congrats, reply_markup=markup)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
async def process_one_update(update_data):
    if not TELEGRAM_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Regex –¢–û–ß–ù–û —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º ‚ù§Ô∏è$'), syrup_heart_handler))

    logger.info("–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    try:
        await application.initialize()
        update = Update.de_json(update_data, application.bot)
        if update.message:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: type={update.message.chat.type}, text='{update.message.text}'")
        else:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update}")
        await application.process_update(update)
        await application.shutdown()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ {update_data.get('update_id', 'N/A')}: {e}", exc_info=True)
        if application.initialized:
             await application.shutdown()


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Vercel (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class handler(BaseHTTPRequestHandler):
    def log_message(self, format, *args):
        logger.info("%s - %s" % (self.address_string(), format % args))
    def do_POST(self):
        logger.info("!!! –í—Ö–æ–¥ –≤ do_POST !!!")
        if not TELEGRAM_TOKEN:
            logger.error("POST: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.send_response(500); self.end_headers(); self.wfile.write(b"Token error"); return
        try:
            content_len = int(self.headers.get('Content-Length', 0))
            if content_len == 0:
                 logger.warning("POST: –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ")
                 self.send_response(400); self.end_headers(); self.wfile.write(b"Empty body"); return
            body_bytes = self.rfile.read(content_len)
            body_json = json.loads(body_bytes.decode('utf-8'))
            logger.info("POST: JSON –ø–æ–ª—É—á–µ–Ω")
            asyncio.run(process_one_update(body_json))
            self.send_response(200); self.send_header('Content-type', 'text/plain'); self.end_headers(); self.wfile.write(b"OK")
            logger.info("POST: –û—Ç–≤–µ—Ç 200 OK")
        except json.JSONDecodeError:
            logger.error("POST: –û—à–∏–±–∫–∞ JSON", exc_info=True)
            self.send_response(400); self.end_headers(); self.wfile.write(b"Invalid JSON"); return
        except Exception as e:
            logger.error(f"POST: –û—à–∏–±–∫–∞ –≤ do_POST: {e}", exc_info=True)
            self.send_response(500); self.end_headers(); self.wfile.write(b"Internal Error"); return
    def do_GET(self):
        logger.info("GET /api/webhook")
        self.send_response(200); self.send_header('Content-type', 'text/plain'); self.end_headers()
        self.wfile.write(b"Bot OK (Syrup Heart Version)"); return