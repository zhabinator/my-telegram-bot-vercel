# -*- coding: utf-8 -*-
import os
import asyncio
import json
import logging
import random # –î–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏

from http.server import BaseHTTPRequestHandler

# –£–±—Ä–∞–ª–∏ aiohttp, –æ–Ω –Ω–µ –Ω—É–∂–µ–Ω –¥–ª—è —ç—Ç–æ–π –≤–µ—Ä—Å–∏–∏
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)

# --- –ö–ª—é—á Telegram ---
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
if not TELEGRAM_TOKEN:
    logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# --- –°–ø–∏—Å–æ–∫ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π ---
congratulations_list = [
    "–ë—É–¥—Ç—å –≤—Å–µ–≥–¥–∞ very sugarüéâ",
    "–¢—ã - –ª–æ–≤—É—à–∫–∞ –¥–ª—è –º—É–∂—Å–∫–æ–≥–æ –í–∞—É! üíñ",
    "–ì–ª–∞–≤–Ω–∞—è —Å—Ç–∞—Ç—å—è –≤ –∫–æ–¥–µ–∫—Å–µ –∫—Ä–∞—Å–æ—Ç—ã ü•≥",
    "–¢—ã –¥–µ–ª–∞–µ—à—å –∞–ø–ø–µ—Ç–∏—Ç –ø—Ä–∏—è—Ç–Ω–µ–µ ‚ú®",
    "–ê—Ä–æ–º–∞—Ç–Ω–æ–≥–æ –¥–Ω—è, –º–∏–ª–µ–¥–∏ü•∞",
    "–†—è–¥–æ–º —Å –≤–∞–º–∏ –Ω–µ —Ö–æ—á–µ—Ç—Å—è –º–æ—Ä–≥–∞—Ç—åü•∞",
    "–ï—Å–ª–∏ –∫—Ä–∞—Å–æ—Ç–∞ —Å–ø–∞—Å–µ—Ç –º–∏—Ä, —Ç–æ –≤—Å—è –Ω–∞–¥–µ–∂–¥–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–±—è!ü•∞", # –ó–∞–ø—è—Ç–∞—è –Ω–∞ –º–µ—Å—Ç–µ
    "–¶–µ–ª—É–µ–º —Ç–æ—Ç –¥–µ–Ω—å, –∫–æ–≥–¥–∞ —Ç—ã —Ä–æ–¥–∏–ª–∞—Å—å!üíñ",
    "–ú–æ—Ä–µ —É–¥–∞—á–∏ –∏ –¥–∞—á–∏ —É –º–æ—Ä—è! üíñ",
]

# --- –í–ê–® –°–ü–ò–°–û–ö URL-–ê–î–†–ï–°–û–í –ö–ê–†–¢–ò–ù–û–ö ---
# –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–ò –°–°–´–õ–ö–ò –ù–ê –°–í–û–ò –†–ï–ê–õ–¨–ù–´–ï –ü–†–Ø–ú–´–ï –°–°–´–õ–ö–ò –ù–ê –ö–ê–†–¢–ò–ù–ö–ò!
image_urls = [
    "https://i.imgur.com/SrFv5sw.jpeg", # –ü—Ä–∏–º–µ—Ä –ø—Ä—è–º–æ–π —Å—Å—ã–ª–∫–∏ Imgur
    "https://i.imgur.com/oXAIpza.jpeg", # –ü—Ä–∏–º–µ—Ä 2
    "https://i.imgur.com/5uHqtKz.jpeg", # –ü—Ä–∏–º–µ—Ä 3
    # –î–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ –±–æ–ª—å—à–µ –≤–∞—à–∏—Ö –ø—Ä—è–º—ã—Ö —Å—Å—ã–ª–æ–∫
]
if not image_urls or image_urls[0].startswith("https://example.com"):
     logger.warning("–°–ø–∏—Å–æ–∫ image_urls –ø—É—Å—Ç –∏–ª–∏ —Å–æ–¥–µ—Ä–∂–∏—Ç –ø—Ä–∏–º–µ—Ä—ã! –ö–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.")
     image_urls = ["https://picsum.photos/500/300"] # –ó–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –° –î–í–£–ú–Ø –ö–ù–û–ü–ö–ê–ú–ò ---
reply_keyboard = [
    [KeyboardButton("–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º ‚ù§Ô∏è"), KeyboardButton("–°–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤–æ ‚ú®")] # –û–±–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    # –ú–æ–∂–Ω–æ —Ä–∞–∑–Ω–µ—Å—Ç–∏ –ø–æ —Ä–∞–∑–Ω—ã–º —Ä—è–¥–∞–º, –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ:
    # [KeyboardButton("–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º ‚ù§Ô∏è")],
    # [KeyboardButton("–°–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤–æ ‚ú®")]
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –û–ë–ï –∫–Ω–æ–ø–∫–∏."""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id: {update.effective_user.id}")
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –ß—Ç–æ –±—É–¥–µ–º –¥–µ–ª–∞—Ç—å?", # –ò–∑–º–µ–Ω–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç
        parse_mode='HTML',
        reply_markup=markup # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–±–µ–∏–º–∏ –∫–Ω–æ–ø–∫–∞–º–∏
    )

async def syrup_heart_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ...'"""
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º' –æ—Ç user_id: {update.effective_user.id}")
    try:
        random_congrats = random.choice(congratulations_list)
        await update.message.reply_text(random_congrats, reply_markup=markup)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –¥–ª—è user_id: {update.effective_user.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ syrup_heart_handler –¥–ª—è user_id: {update.effective_user.id}: {e}", exc_info=True)
        try: await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è!", reply_markup=markup)
        except Exception as send_err: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_err}")

async def send_beautiful_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏ '–°–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤–æ'."""
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–°–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤–æ' –æ—Ç user_id: {update.effective_user.id}")

    if not image_urls or image_urls[0].startswith("https://picsum.photos"): # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç —Ç–æ–∂–µ
        logger.error(f"–°–ø–∏—Å–æ–∫ image_urls –ø—É—Å—Ç –∏–ª–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è user_id: {update.effective_user.id}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫—Ä–∞—Å–∏–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å–µ–π—á–∞—Å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.", reply_markup=markup)
        return

    try:
        random_image_url = random.choice(image_urls)
        logger.info(f"–í—ã–±—Ä–∞–Ω URL –∫–∞—Ä—Ç–∏–Ω–∫–∏: {random_image_url} –¥–ª—è user_id: {update.effective_user.id}")

        await update.message.reply_photo(
            photo=random_image_url,
            caption="–õ–æ–≤–∏ –∫—Ä–∞—Å–æ—Ç—É! ‚ú®",
            reply_markup=markup
            )
        logger.info(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id: {update.effective_user.id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è user_id: {update.effective_user.id}: {e}", exc_info=True)
        try:
            await update.message.reply_text("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=markup)
        except Exception as send_err:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {send_err}")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
async def process_one_update(update_data):
    if not TELEGRAM_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # --- –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –Ω—É–∂–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
    application.add_handler(CommandHandler("start", start))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º ‚ù§Ô∏è"
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º ‚ù§Ô∏è$'), syrup_heart_handler))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤–æ ‚ú®"
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–°–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤–æ ‚ú®$'), send_beautiful_image))

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (start, –æ–±–µ –∫–Ω–æ–ø–∫–∏) –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    try:
        logger.debug(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è update_id: {update_data.get('update_id')}")
        await application.initialize()
        update = Update.de_json(update_data, application.bot)

        if update.message:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: chat_id={update.message.chat.id}, user_id={update.effective_user.id}, text='{update.message.text}'")
        else:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update}")

        logger.debug(f"–ó–∞–ø—É—Å–∫ process_update –¥–ª—è update_id: {update.update_id}")
        await application.process_update(update)
        logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ shutdown –¥–ª—è update_id: {update.update_id}")
        await application.shutdown()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update_data.get('update_id', 'N/A')}: {e}", exc_info=True)
        if application.initialized:
             try: await application.shutdown()
             except Exception as shutdown_e: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ shutdown –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {shutdown_e}", exc_info=True)


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Vercel (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class handler(BaseHTTPRequestHandler):
    def log_message(self, format, *args):
        logger.info("%s - %s" % (self.address_string(), format % args))
    def do_POST(self):
        logger.info("!!! –í—Ö–æ–¥ –≤ do_POST !!!")
        if not TELEGRAM_TOKEN:
            logger.error("POST: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ do_POST)")
            self.send_response(500); self.end_headers(); self.wfile.write(b"Bot token not configured"); return
        try:
            content_len = int(self.headers.get('Content-Length', 0))
            if content_len == 0:
                 logger.warning("POST: –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
                 self.send_response(400); self.end_headers(); self.wfile.write(b"Empty request body"); return
            body_bytes = self.rfile.read(content_len)
            logger.debug(f"POST: –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–±–∞–π—Ç—ã): {body_bytes[:200]}...")
            body_json = json.loads(body_bytes.decode('utf-8'))
            logger.info("POST: JSON –ø–æ–ª—É—á–µ–Ω –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω")
            asyncio.run(process_one_update(body_json))
            self.send_response(200); self.send_header('Content-type', 'text/plain'); self.end_headers(); self.wfile.write(b"OK")
            logger.info("POST: –û—Ç–≤–µ—Ç 200 OK –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω Telegram.")
        except json.JSONDecodeError as e:
            logger.error("POST: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON.", exc_info=True)
            self.send_response(400); self.end_headers(); self.wfile.write(b"Invalid JSON"); return
        except Exception as e:
            logger.error(f"POST: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ do_POST: {e}", exc_info=True)
            self.send_response(500); self.end_headers(); self.wfile.write(b"Internal Server Error"); return
    def do_GET(self):
        logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω GET-–∑–∞–ø—Ä–æ—Å –∫ /api/webhook")
        self.send_response(200); self.send_header('Content-type', 'text/plain'); self.end_headers()
        self.wfile.write(b"Bot OK (Syrup Heart + Beautiful Picture Version)"); return # –û–±–Ω–æ–≤–∏–ª —Ç–µ–∫—Å—Ç