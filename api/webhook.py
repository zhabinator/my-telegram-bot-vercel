# -*- coding: utf-8 -*-
import os
import asyncio
import json
import logging
import random # –î–æ–±–∞–≤–∏–ª–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è

from http.server import BaseHTTPRequestHandler
# –£–±—Ä–∞–ª–∏ urllib.parse, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton # –£–±—Ä–∞–ª–∏ ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
    # –£–±—Ä–∞–ª–∏ ConversationHandler –∏ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –∏–º–ø–æ—Ä—Ç—ã
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–º–æ–∂–Ω–æ –≤–µ—Ä–Ω—É—Ç—å INFO, –µ—Å–ª–∏ DEBUG –Ω–µ –Ω—É–∂–µ–Ω) ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO # –ú–æ–∂–Ω–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å INFO –¥–ª—è –º–µ–Ω–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING) # –ü–æ–¥–∞–≤–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ httpx

# --- –ö–ª—é—á–∏ ---
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
# OWM_API_KEY –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–µ–Ω

# --- –°–ø–∏—Å–æ–∫ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π (–î–æ–±–∞–≤—å—Ç–µ –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç–µ –ø–æ —Å–≤–æ–µ–º—É –≤–∫—É—Å—É!) ---
congratulations_list = [
    "–ë—É–¥—Ç—å –≤—Å–µ–≥–¥–∞ very sugarüéâ",
    "–¢—ã - –ª–æ–≤—É—à–∫–∞ –¥–ª—è –º—É–∂—Å–∫–æ–≥–æ –í–∞—É! üíñ",
    "–ì–ª–∞–≤–Ω–∞—è —Å—Ç–∞—Ç—å—è –≤ –∫–æ–¥–µ–∫—Å–µ –∫—Ä–∞—Å–æ—Ç—ã ü•≥",
    "–¢—ã –¥–µ–ª–∞–µ—à—å –∞–ø–ø–µ—Ç–∏—Ç –ø—Ä–∏—è—Ç–Ω–µ–µ ‚ú®",
    "–ê—Ä–æ–º–∞—Ç–Ω–æ–≥–æ –¥–Ω—è, –º–∏–ª–µ–¥–∏ü•∞"
    "–†—è–¥–æ–º —Å –≤–∞–º–∏ –Ω–µ —Ö–æ—á–µ—Ç—Å—è –º–æ—Ä–≥–∞—Ç—åü•∞"
    "–ï—Å–ª–∏ –∫—Ä–∞—Å–æ—Ç–∞ —Å–ø–∞—Å–µ—Ç –º–∏—Ä, —Ç–æ –≤—Å—è –Ω–∞–¥–µ–∂–¥–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–±—è!ü•∞"
    "–¶–µ–ª—É–µ–º —Ç–æ—Ç –¥–µ–Ω—å, –∫–æ–≥–¥–∞ —Ç—ã —Ä–æ–¥–∏–ª–∞—Å—å!üíñ"
    "–ú–æ—Ä–µ —É–¥–∞—á–∏ –∏ –¥–∞—á–∏ —É –º–æ—Ä—è! üíñ"
]

# --- –ù–æ–≤–∞—è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
reply_keyboard = [
    [KeyboardButton("–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º ‚ù§Ô∏è")] # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False) # one_time_keyboard=False, —á—Ç–æ–±—ã –Ω–µ —Å–∫—Ä—ã–≤–∞–ª–∞—Å—å —Å—Ä–∞–∑—É

# --- –ù–æ–≤—ã–µ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–Ω–æ–ø–∫—É."""
    logger.info("–í—ã–∑–≤–∞–Ω–∞ /start")
    user = update.effective_user
    # –ë–æ–ª–µ–µ –ø—Ä–æ—Å—Ç–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –ì–æ—Ç–æ–≤ –ø–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ? ‚ù§Ô∏è",
        parse_mode='HTML',
        reply_markup=markup
    )

async def syrup_heart_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏."""
    logger.info("–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º'")
    # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
    random_congrats = random.choice(congratulations_list)
    await update.message.reply_text(random_congrats, reply_markup=markup)

# --- –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
async def process_one_update(update_data):
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    if not TELEGRAM_TOKEN:
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # --- –î–æ–±–∞–≤–ª—è–µ–º –¢–û–õ–¨–ö–û –Ω—É–∂–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ CommandHandler(start)...")
    application.add_handler(CommandHandler("start", start))
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ MessageHandler(–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ)...")
    # –í–ê–ñ–ù–û: Regex –¥–æ–ª–∂–µ–Ω –¢–û–ß–ù–û —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏!
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º ‚ù§Ô∏è$'), syrup_heart_handler))

    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    logger.info("–£–ø—Ä–æ—â–µ–Ω–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    try:
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        logger.debug(f"–ò–Ω–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {update_data.get('update_id')}")
        await application.initialize()
        update = Update.de_json(update_data, application.bot)
        # –õ–æ–≥–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: type={update.message.chat.type}, text='{update.message.text}'")
        else:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update}")
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        logger.debug(f"–ó–∞–ø—É—Å–∫ process_update –¥–ª—è {update.update_id}")
        await application.process_update(update) # <- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ shutdown –¥–ª—è {update.update_id}")
        await application.shutdown()
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    except Exception as e:
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ {update_data.get('update_id', 'N/A')}: {e}", exc_info=True)
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ shutdown
        if application.initialized:
             # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤
             await application.shutdown()


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Vercel (–û—Å—Ç–∞–≤–ª—è–µ–º –ë–ï–ó –ò–ó–ú–ï–ù–ï–ù–ò–ô) ---
class handler(BaseHTTPRequestHandler): # –ù–∞—á–∞–ª–æ –∫–ª–∞—Å—Å–∞, –Ω–µ—Ç –æ—Ç—Å—Ç—É–ø–∞

    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞ –ø–µ—Ä–µ–¥ def log_message
    def log_message(self, format, *args):
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.info
        logger.info("%s - %s" % (self.address_string(), format % args))

    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞ –ø–µ—Ä–µ–¥ def do_POST
    def do_POST(self):
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤—Ö–æ–¥—è—â–∏–µ POST-–∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram."""
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.info
        logger.info("!!! –í—Ö–æ–¥ –≤ do_POST !!!")
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ if not TELEGRAM_TOKEN:
        if not TELEGRAM_TOKEN:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.error –∏ –¥–∞–ª–µ–µ –≤–Ω—É—Ç—Ä–∏ if
            logger.error("POST: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω")
            self.send_response(500)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"Token error")
            return # –í—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞

        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ try
        try:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ content_len
            content_len = int(self.headers.get('Content-Length', 0))
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ if content_len == 0:
            if content_len == 0:
                 # –û—Ç—Å—Ç—É–ø 16 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.warning –∏ –¥–∞–ª–µ–µ –≤–Ω—É—Ç—Ä–∏ if
                 logger.warning("POST: –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ")
                 self.send_response(400)
                 self.send_header('Content-type', 'text/plain')
                 self.end_headers()
                 self.wfile.write(b"Empty body")
                 return

            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ body_bytes
            body_bytes = self.rfile.read(content_len)
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ body_json
            body_json = json.loads(body_bytes.decode('utf-8'))
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.info
            logger.info("POST: JSON –ø–æ–ª—É—á–µ–Ω")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ asyncio.run
            asyncio.run(process_one_update(body_json))

            # –û—Ç–≤–µ—á–∞–µ–º Telegram –ù–ï–ú–ï–î–õ–ï–ù–ù–û
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ self.send_response
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"OK")
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.info
            logger.info("POST: –û—Ç–≤–µ—Ç 200 OK")

        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ except json.JSONDecodeError
        except json.JSONDecodeError:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.error –∏ –¥–∞–ª–µ–µ –≤–Ω—É—Ç—Ä–∏ except
            logger.error("POST: –û—à–∏–±–∫–∞ JSON", exc_info=True)
            self.send_response(400)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"Invalid JSON")
            return
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ except Exception
        except Exception as e:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.error –∏ –¥–∞–ª–µ–µ –≤–Ω—É—Ç—Ä–∏ except
            logger.error(f"POST: –û—à–∏–±–∫–∞ –≤ do_POST: {e}", exc_info=True)
            self.send_response(500)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"Internal Error")
            return

    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞ –ø–µ—Ä–µ–¥ def do_GET
    def do_GET(self):
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.info
        logger.info("GET /api/webhook")
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ self.send_response
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b"Bot OK (Syrup Heart Version)") # –ú–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è GET –∑–∞–ø—Ä–æ—Å–∞
        return
# –ö–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞ handler