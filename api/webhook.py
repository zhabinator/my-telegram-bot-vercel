# -*- coding: utf-8 -*-
import os
import asyncio
import json
import logging
import aiohttp
import re

from http.server import BaseHTTPRequestHandler
from urllib.parse import parse_qs

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton # –£–±—Ä–∞–ª–∏ ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
    # –£–±—Ä–∞–ª–∏ ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º DEBUG)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)

# --- –ö–ª—é—á–∏ ---
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
OWM_API_KEY = os.environ.get('OWM_API_KEY')

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ (–±–µ–∑ –∫–Ω–æ–ø–∫–∏ –ü–æ–≥–æ–¥–∞) ---
reply_keyboard = [
    [KeyboardButton("–®—É—Ç–∫–∞ üé≤"), KeyboardButton("–û –±–æ—Ç–µ ‚ÑπÔ∏è")]
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã ---
async def fetch_and_send_weather(update: Update, context: ContextTypes.DEFAULT_TYPE, city_name: str):
    # ... (–∫–æ–¥ fetch_and_send_weather –∫–∞–∫ –≤ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –æ—Ç–≤–µ—Ç–µ) ...
    logger.info(f"fetch_and_send_weather: –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è '{city_name}'")
    if not OWM_API_KEY: logger.error("fetch: –ö–ª—é—á OWM –Ω–µ –Ω–∞–π–¥–µ–Ω."); await update.message.reply_text("–ö–ª—é—á –ø–æ–≥–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=markup); return
    weather_api_url = f"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={OWM_API_KEY}&units=metric&lang=ru"
    logger.info(f"fetch: URL: {weather_api_url}")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(weather_api_url) as response:
                if response.status == 401: logger.error(f"fetch: 401 OWM –¥–ª—è '{city_name}'."); await update.message.reply_text("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–≥–æ–¥—ã.", reply_markup=markup); return
                if response.status == 404: logger.warning(f"fetch: 404 OWM –¥–ª—è '{city_name}'."); await update.message.reply_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥ '{city_name}'.", reply_markup=markup); return
                response.raise_for_status(); data = await response.json(); logger.info(f"fetch: –û—Ç–≤–µ—Ç OWM: {data}")
        weather_list = data.get("weather", []); main_weather = weather_list[0].get("description", "N/A") if weather_list else "N/A"; main_data = data.get("main", {}); temp = main_data.get("temp", "N/A"); feels_like = main_data.get("feels_like", "N/A"); humidity = main_data.get("humidity", "N/A"); wind_data = data.get("wind", {}); wind_speed = wind_data.get("speed", "N/A"); city_display_name = data.get("name", city_name)
        weather_text = f"–ü–æ–≥–æ–¥–∞ –≤ {city_display_name}:\n–û–ø–∏—Å–∞–Ω–∏–µ: {main_weather.capitalize()}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n–û—â—É—â–∞–µ—Ç—Å—è: {feels_like}¬∞C\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–í–µ—Ç–µ—Ä: {wind_speed} –º/—Å"
        await update.message.reply_text(weather_text, reply_markup=markup)
    except Exception as e: logger.error(f"fetch: –û—à–∏–±–∫–∞ –¥–ª—è '{city_name}': {e}", exc_info=True); await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.", reply_markup=markup)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): logger.info("–í—ã–∑–≤–∞–Ω–∞ /start"); user_name = update.effective_user.first_name or "User"; await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç, {user_name}! –ü–æ—à—É—Ç–∏–º (/joke –∏–ª–∏ –∫–Ω–æ–ø–∫–∞) –∏–ª–∏ —É–∑–Ω–∞–µ–º –ø–æ–≥–æ–¥—É (/weather –ì–æ—Ä–æ–¥)?', reply_markup=markup)
async def joke_command(update: Update, context: ContextTypes.DEFAULT_TYPE): logger.info("–í—ã–∑–≤–∞–Ω–∞ /joke –∏–ª–∏ –∫–Ω–æ–ø–∫–∞"); joke_api_url = "https://official-joke-api.appspot.com/random_joke"; try: async with aiohttp.ClientSession() as s, s.get(joke_api_url) as r: r.raise_for_status(); data=await r.json(); logger.info(f"/joke: –û—Ç–≤–µ—Ç API: {data}"); setup=data.get("setup"); p=data.get("punchline"); await update.message.reply_text(f"{setup}\n\n{p}" if setup and p else "–®—É—Ç–∫–∞ –Ω–µ –ø—Ä–∏—à–ª–∞ :(", reply_markup=markup) except Exception as e: logger.error(f"/joke –û—à–∏–±–∫–∞: {e}", exc_info=True); await update.message.reply_text("–ù–µ –≤—ã—à–ª–æ –ø–æ—à—É—Ç–∏—Ç—å.", reply_markup=markup)
async def weather_command_direct(update: Update, context: ContextTypes.DEFAULT_TYPE): logger.info("–í—ã–∑–≤–∞–Ω–∞ /weather –ì–æ—Ä–æ–¥"); city = " ".join(context.args) if context.args else None; await fetch_and_send_weather(update, context, city) if city else await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather –ì–æ—Ä–æ–¥", reply_markup=markup)
async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE): logger.info("–í—ã–∑–≤–∞–Ω–∞ –û –±–æ—Ç–µ"); await update.message.reply_text("–ë–æ—Ç –¥–ª—è —à—É—Ç–æ–∫ –∏ –ø–æ–≥–æ–¥—ã.", reply_markup=markup)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
async def process_one_update(update_data):
    if not TELEGRAM_TOKEN: logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!"); return
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # --- !!! –£–ë–†–ê–õ–ò ConversationHandler, –£–ü–†–û–°–¢–ò–õ–ò –†–ï–ì–ò–°–¢–†–ê–¶–ò–Æ !!! ---
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("joke", joke_command))
    application.add_handler(CommandHandler("weather", weather_command_direct)) # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è /weather –ì–æ—Ä–æ–¥
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–®—É—Ç–∫–∞ üé≤$'), joke_command))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–û –±–æ—Ç–µ ‚ÑπÔ∏è$'), about_command))
    # --------------------------------------------------------------

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è).")
    try:
        logger.debug(f"–ò–Ω–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {update_data.get('update_id')}")
        await application.initialize()
        update = Update.de_json(update_data, application.bot)
        if update.message: logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: type={update.message.chat.type}, text='{update.message.text}'")
        elif update.callback_query: logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: data='{update.callback_query.data}'")
        else: logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update}")
        logger.debug(f"–ó–∞–ø—É—Å–∫ process_update –¥–ª—è {update.update_id}")
        await application.process_update(update)
        logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ shutdown –¥–ª—è {update.update_id}")
        await application.shutdown()
    except Exception as e: logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ {update_data.get('update_id', 'N/A')}: {e}", exc_info=True); await application.shutdown() if application.initialized else None

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Vercel ---
class handler(BaseHTTPRequestHandler):
    def log_message(self, format, *args): logger.info("%s - %s" % (self.address_string(), format % args))
    def do_POST(self): logger.info("!!! –í—Ö–æ–¥ –≤ do_POST !!!"); # ... (–∫–æ–¥ do_POST –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π, –∫–∞–∫ –≤ –ø–æ—Å–ª–µ–¥–Ω–µ–π —Ä–∞–±–æ—á–µ–π –≤–µ—Ä—Å–∏–∏) ...
        if not TELEGRAM_TOKEN: logger.error("POST: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"); self.send_response(500); self.end_headers(); self.wfile.write(b"Token error"); return
        try:
            content_len = int(self.headers.get('Content-Length', 0)); body_bytes = self.rfile.read(content_len)
            if content_len == 0: logger.warning("POST: –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ"); self.send_response(400); self.end_headers(); self.wfile.write(b"Empty body"); return
            body_json = json.loads(body_bytes.decode('utf-8')); logger.info("POST: JSON –ø–æ–ª—É—á–µ–Ω")
            asyncio.run(process_one_update(body_json))
            self.send_response(200); self.send_header('Content-type', 'text/plain'); self.end_headers(); self.wfile.write(b"OK"); logger.info("POST: –û—Ç–≤–µ—Ç 200 OK")
        except json.JSONDecodeError: logger.error("POST: –û—à–∏–±–∫–∞ JSON", exc_info=True); self.send_response(400); self.end_headers(); self.wfile.write(b"Invalid JSON"); return
        except Exception as e: logger.error(f"POST: –û—à–∏–±–∫–∞ –≤ do_POST: {e}", exc_info=True); self.send_response(500); self.end_headers(); self.wfile.write(b"Internal Error"); return
    def do_GET(self): logger.info("GET /api/webhook"); self.send_response(200); self.send_header('Content-type', 'text/plain'); self.end_headers(); self.wfile.write(b"Bot OK"); return