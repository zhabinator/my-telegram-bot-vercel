# -*- coding: utf-8 -*-
import os
import asyncio
import json
import logging
import aiohttp # –î–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã—Ö HTTP-–∑–∞–ø—Ä–æ—Å–æ–≤

from http.server import BaseHTTPRequestHandler
from urllib.parse import parse_qs

# –ò–º–ø–æ—Ä—Ç—ã Telegram: –î–æ–±–∞–≤–ª—è–µ–º KeyboardButton –∏ ReplyKeyboardMarkup
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)

# --- –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á Telegram ---
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
# --- –ö–ª—é—á OWM_API_KEY –Ω–µ –Ω—É–∂–µ–Ω ---
# --------------------------------------------

# --- –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ---
reply_keyboard = [
    [KeyboardButton("–®—É—Ç–∫–∞ üé≤")] # –û–¥–Ω–∞ –∫–Ω–æ–ø–∫–∞
    # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –≤ —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫ –∏–ª–∏ –≤ –Ω–æ–≤—ã–µ —Å—Ç—Ä–æ–∫–∏
    # [KeyboardButton("–î—Ä—É–≥–∞—è –∫–Ω–æ–ø–∫–∞")]
]
# –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)
# -------------------------


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start - —Ç–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
    user_name = update.effective_user.first_name or "User"
    logger.info(f"–í—ã–∑–≤–∞–Ω–∞ /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {user_name}")
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await update.message.reply_text(
        f'–ü—Ä–∏–≤–µ—Ç, {user_name}! –ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —à—É—Ç–∫—É.',
        reply_markup=markup # –ü—Ä–∏–∫—Ä–µ–ø–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∫ —Å–æ–æ–±—â–µ–Ω–∏—é
    )

async def joke_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π /joke –ò–õ–ò –∫–Ω–æ–ø–∫–æ–π)"""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫ –±—ã–ª–∞ –≤—ã–∑–≤–∞–Ω–∞ —Ñ—É–Ω–∫—Ü–∏—è (–¥–ª—è –ª–æ–≥–∞)
    if update.message.text == "/joke":
        logger.info("–í—ã–∑–≤–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ /joke")
    else:
        logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '{update.message.text}'")

    joke_api_url = "https://official-joke-api.appspot.com/random_joke"
    logger.info(f"–ó–∞–ø—Ä–æ—Å —à—É—Ç–∫–∏ —Å {joke_api_url}")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(joke_api_url) as response:
                response.raise_for_status()
                data = await response.json()
                logger.info(f"–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API —à—É—Ç–æ–∫: {data}")

        setup = data.get("setup")
        punchline = data.get("punchline")

        if setup and punchline:
            joke_text = f"{setup}\n\n{punchline}"
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —à—É—Ç–∫—É –ò –°–ù–û–í–ê –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await update.message.reply_text(joke_text, reply_markup=markup)
        else:
            logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å setup/punchline –∏–∑ –æ—Ç–≤–µ—Ç–∞: {data}")
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ò –°–ù–û–í–ê –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            await update.message.reply_text("–ù–µ–æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à—É—Ç–∫–∏ –ø—Ä–∏—à–µ–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=markup)

    except aiohttp.ClientError as e:
        logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ —à—É—Ç–∫–∏: {e}", exc_info=True)
        await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º —à—É—Ç–æ–∫. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=markup)
    except json.JSONDecodeError as e:
         logger.error(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –æ—Ç API —à—É—Ç–æ–∫: {e}", exc_info=True)
         await update.message.reply_text("–°–µ—Ä–≤–µ—Ä —à—É—Ç–æ–∫ –æ—Ç–≤–µ—Ç–∏–ª —á—Ç–æ-—Ç–æ –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=markup)
    except Exception as e:
        logger.error(f"–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —à—É—Ç–∫–∏: {e}", exc_info=True)
        await update.message.reply_text("–û–π, —á—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —à—É—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=markup)

# --- –§—É–Ω–∫—Ü–∏—è weather_command –£–î–ê–õ–ï–ù–ê ---


# --- –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –û–î–ù–û–ì–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
async def process_one_update(update_data):
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    if not TELEGRAM_TOKEN:
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
        return
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # --- –†–ï–ì–ò–°–¢–†–ê–¶–ò–Ø –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í ---
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    # 1. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    application.add_handler(CommandHandler("start", start))
    # 2. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /joke (–æ—Å—Ç–∞–≤–ª—è–µ–º –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    application.add_handler(CommandHandler("joke", joke_command))
    # 3. –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ù–ê–ñ–ê–¢–ò–Ø –ö–ù–û–ü–ö–ò "–®—É—Ç–∫–∞ üé≤"
    # –û–Ω —Ä–µ–∞–≥–∏—Ä—É–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –¢–û–ß–ù–û —Å–æ–≤–ø–∞–¥–∞—é—â–µ–µ —Å —Ç–µ–∫—Å—Ç–æ–º –∫–Ω–æ–ø–∫–∏
    application.add_handler(MessageHandler(
        filters.TEXT & filters.Regex(r'^–®—É—Ç–∫–∞ üé≤$'), # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ—á–Ω–æ–º—É —Ç–µ–∫—Å—Ç—É –∫–Ω–æ–ø–∫–∏
        joke_command # –í—ã–∑—ã–≤–∞–µ–º —Ç—É –∂–µ —Ñ—É–Ω–∫—Ü–∏—é, —á—Ç–æ –∏ –¥–ª—è /joke
    ))
    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ /weather –∏ echo —É–¥–∞–ª–µ–Ω—ã ---
    # --------------------------------

    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è start, joke –∏ –∫–Ω–æ–ø–∫–∏ '–®—É—Ç–∫–∞' –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    try:
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        await application.initialize()
        update = Update.de_json(update_data, application.bot)
        # –õ–æ–≥–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: type={update.message.chat.type}, text='{update.message.text}'")
        else:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update}")
        await application.process_update(update)
        await application.shutdown()
    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞
    except Exception as e:
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update_data.get('update_id', 'N/A')}: {e}", exc_info=True)
        if application.initialized:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤
            try:
                await application.shutdown()
            except Exception as shutdown_e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ shutdown –ø–æ—Å–ª–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–∏: {shutdown_e}", exc_info=True)


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ –¥–ª—è Vercel (–æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class handler(BaseHTTPRequestHandler): # –ù–∞—á–∞–ª–æ –∫–ª–∞—Å—Å–∞, –Ω–µ—Ç –æ—Ç—Å—Ç—É–ø–∞

    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞ –ø–µ—Ä–µ–¥ def log_message
    def log_message(self, format, *args):
          # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.info
          logger.info("%s - %s" % (self.address_string(), format%args))

    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞ –ø–µ—Ä–µ–¥ def do_POST
    def do_POST(self):
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.info
        logger.info("!!! –í—Ö–æ–¥ –≤ do_POST !!!")
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ if not TELEGRAM_TOKEN:
        if not TELEGRAM_TOKEN:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.error –∏ –¥–∞–ª–µ–µ –≤–Ω—É—Ç—Ä–∏ if
            logger.error("POST-–∑–∞–ø—Ä–æ—Å: –¢–æ–∫–µ–Ω –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω.")
            self.send_response(500)
            self.end_headers()
            self.wfile.write(b"Bot token not configured")
            return
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ try
        try:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ content_len
            content_len = int(self.headers.get('Content-Length', 0))
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ if content_len == 0:
            if content_len == 0:
                 # –û—Ç—Å—Ç—É–ø 16 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.warning –∏ –¥–∞–ª–µ–µ –≤–Ω—É—Ç—Ä–∏ if
                 logger.warning("POST-–∑–∞–ø—Ä–æ—Å: –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ.")
                 self.send_response(400)
                 self.end_headers()
                 self.wfile.write(b"Empty request body")
                 return
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ body_bytes
            body_bytes = self.rfile.read(content_len)
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ body_json
            body_json = json.loads(body_bytes.decode('utf-8'))
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.info
            logger.info("POST-–∑–∞–ø—Ä–æ—Å: JSON –ø–æ–ª—É—á–µ–Ω –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω.")
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ asyncio.run
            asyncio.run(process_one_update(body_json))
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ self.send_response
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"OK")
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.info
            logger.info("POST-–∑–∞–ø—Ä–æ—Å: –û—Ç–≤–µ—Ç 200 OK –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.")
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ except json.JSONDecodeError
        except json.JSONDecodeError:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.error –∏ –¥–∞–ª–µ–µ –≤–Ω—É—Ç—Ä–∏ except
            logger.error("POST-–∑–∞–ø—Ä–æ—Å: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON.", exc_info=True)
            self.send_response(400)
            self.end_headers()
            self.wfile.write(b"Invalid JSON received")
            return
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ except Exception
        except Exception as e:
            # –û—Ç—Å—Ç—É–ø 12 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.error –∏ –¥–∞–ª–µ–µ –≤–Ω—É—Ç—Ä–∏ except
            logger.error(f"POST-–∑–∞–ø—Ä–æ—Å: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ do_POST: {e}", exc_info=True)
            self.send_response(500)
            self.end_headers()
            self.wfile.write(b"Internal Server Error occurred")
            return

    # –û—Ç—Å—Ç—É–ø 4 –ø—Ä–æ–±–µ–ª–∞ –ø–µ—Ä–µ–¥ def do_GET
    def do_GET(self):
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ logger.info
        logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω GET-–∑–∞–ø—Ä–æ—Å –∫ /api/webhook")
        # –û—Ç—Å—Ç—É–ø 8 –ø—Ä–æ–±–µ–ª–æ–≤ –ø–µ—Ä–µ–¥ self.send_response
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        self.wfile.write(b"Hello! Joke Bot (Button activated) webhook endpoint is active.") # –û–±–Ω–æ–≤–∏–ª —Ç–µ–∫—Å—Ç
        return
# –ö–æ–Ω–µ—Ü –∫–ª–∞—Å—Å–∞ handler