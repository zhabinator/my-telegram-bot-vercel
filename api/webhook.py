# -*- coding: utf-8 -*-
import os
import asyncio
import json
import logging
from typing import List # –î–ª—è —Ç–∏–ø–∏–∑–∞—Ü–∏–∏ —Å–ø–∏—Å–∫–æ–≤

# --- –ù–û–í–´–ï –ò–ú–ü–û–†–¢–´ ---
from vercel_kv import kv # –ö–ª–∏–µ–Ω—Ç –¥–ª—è Vercel KV
# --------------------

from http.server import BaseHTTPRequestHandler

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)
logging.getLogger("vercel_kv").setLevel(logging.INFO)
logging.getLogger("httpx").setLevel(logging.WARNING)

# --- –ö–ª—é—á Telegram ---
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
if not TELEGRAM_TOKEN:
    logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# --- –°–ø–∏—Å–æ–∫ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π ---
congratulations_list: List[str] = [
    "–ë—É–¥—Ç—å –≤—Å–µ–≥–¥–∞ very sugarüéâ",
    "–¢—ã - –ª–æ–≤—É—à–∫–∞ –¥–ª—è –º—É–∂—Å–∫–æ–≥–æ –í–∞—É! üíñ",
    "–ì–ª–∞–≤–Ω–∞—è —Å—Ç–∞—Ç—å—è –≤ –∫–æ–¥–µ–∫—Å–µ –∫—Ä–∞—Å–æ—Ç—ã ü•≥",
    "–¢—ã –¥–µ–ª–∞–µ—à—å –∞–ø–ø–µ—Ç–∏—Ç –ø—Ä–∏—è—Ç–Ω–µ–µ ‚ú®",
    "–ê—Ä–æ–º–∞—Ç–Ω–æ–≥–æ –¥–Ω—è, –º–∏–ª–µ–¥–∏ü•∞",
    "–†—è–¥–æ–º —Å –≤–∞–º–∏ –Ω–µ —Ö–æ—á–µ—Ç—Å—è –º–æ—Ä–≥–∞—Ç—åü•∞",
    "–ï—Å–ª–∏ –∫—Ä–∞—Å–æ—Ç–∞ —Å–ø–∞—Å–µ—Ç –º–∏—Ä, —Ç–æ –≤—Å—è –Ω–∞–¥–µ–∂–¥–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–±—è!ü•∞",
    "–¶–µ–ª—É–µ–º —Ç–æ—Ç –¥–µ–Ω—å, –∫–æ–≥–¥–∞ —Ç—ã —Ä–æ–¥–∏–ª–∞—Å—å!üíñ",
    "–ú–æ—Ä–µ —É–¥–∞—á–∏ –∏ –¥–∞—á–∏ —É –º–æ—Ä—è! üíñ",
]

# --- –°–ø–∏—Å–æ–∫ URL –∫–∞—Ä—Ç–∏–Ω–æ–∫ ---
# –ó–ê–ú–ï–ù–ò–¢–ï –ù–ê –°–í–û–ò –†–ï–ê–õ–¨–ù–´–ï –ü–†–Ø–ú–´–ï –°–°–´–õ–ö–ò!
image_urls: List[str] = [
    "https://i.imgur.com/P14dISY.jpeg",
    "https://i.imgur.com/SrFv5sw.jpeg",
    "https://i.imgur.com/xEsRHUU.jpeg",
    "https://i.imgur.com/Hqe3MOI.jpeg",
    "https://i.imgur.com/WkdZRkw.jpeg" # –ü—Ä–∏–º–µ—Ä 3 (–¥—Ä—É–≥–æ–π)
    # –î–æ–±–∞–≤—å—Ç–µ –±–æ–ª—å—à–µ –≤–∞—à–∏—Ö —Å—Å—ã–ª–æ–∫
]
if not image_urls:
     logger.warning("–°–ø–∏—Å–æ–∫ image_urls –ø—É—Å—Ç! –ö–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è.")
     # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∞—Å–Ω–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –∏–ª–∏ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—É—Å—Ç—ã–º

# --- ID –í–∞—à–µ–≥–æ –ê—É–¥–∏–æ—Ñ–∞–π–ª–∞ ---
HAPPY_BIRTHDAY_AUDIO_ID = "CQACAgIAAxkBAAEd2Z9n99j8nLv08edj8YC2UjLcN_AlNQAC1nEAAm2gwEuxk0AF1ieRlDYE" # –í—Å—Ç–∞–≤–∏–ª–∏ –≤–∞—à ID

# --- –û–±–Ω–æ–≤–ª–µ–Ω–Ω–∞—è –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
reply_keyboard = [
    [KeyboardButton("–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º ‚ù§Ô∏è"), KeyboardButton("–°–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤–æ ‚ú®")],
    [KeyboardButton("–•–µ–ø–ø–∏ –±–µ–∑–¥–µ–π üéÇ")] # –î–æ–±–∞–≤–∏–ª–∏ –∫–Ω–æ–ø–∫—É "–•–µ–ø–ø–∏ –±–µ–∑–¥–µ–π"
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞ –∏–∑ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ KV ---
async def get_next_item(user_id: int, list_key: str, item_list: List[str]) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å –∏–∑ KV, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–ª–µ–º–µ–Ω—Ç –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤—ã–π –∏–Ω–¥–µ–∫—Å.
    :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.
    :param list_key: –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–ª—é—á –¥–ª—è —ç—Ç–æ–≥–æ —Å–ø–∏—Å–∫–∞ (–Ω–∞–ø—Ä., 'syrup', 'beauty_img').
    :param item_list: –°–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ (—Å–æ–æ–±—â–µ–Ω–∏–π –∏–ª–∏ URL).
    :return: –°–ª–µ–¥—É—é—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –∏–∑ —Å–ø–∏—Å–∫–∞.
    """
    if not item_list:
        logger.warning(f"–°–ø–∏—Å–æ–∫ –¥–ª—è –∫–ª—é—á–∞ '{list_key}' –ø—É—Å—Ç.")
        return "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç." # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –∏–ª–∏ –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É

    kv_key = f"next_idx:{user_id}:{list_key}" # –ù–µ–º–Ω–æ–≥–æ –∏–∑–º–µ–Ω–∏–ª —Ñ–æ—Ä–º–∞—Ç –∫–ª—é—á–∞
    logger.debug(f"KV –∫–ª—é—á –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞: {kv_key}")
    current_index: int = 0
    try:
        stored_value = await kv.get(kv_key)
        if isinstance(stored_value, int):
            current_index = stored_value
        # –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—Ç—Ä–æ–∫—É, –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
        elif isinstance(stored_value, str) and stored_value.isdigit():
             current_index = int(stored_value)
        else:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ—Ç –∏–ª–∏ –Ω–µ —á–∏—Å–ª–æ, –Ω–∞—á–∏–Ω–∞–µ–º —Å 0
            logger.info(f"–ò–Ω–¥–µ–∫—Å –¥–ª—è {kv_key} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —á–∏—Å–ª–æ–º ({stored_value}), –Ω–∞—á–∏–Ω–∞–µ–º —Å 0.")
            current_index = 0

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—ã—Ö–æ–¥ –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å–ø–∏—Å–∫–∞
        if not (0 <= current_index < len(item_list)):
            logger.warning(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –∏–Ω–¥–µ–∫—Å {current_index} –≤–Ω–µ –¥–∏–∞–ø–∞–∑–æ–Ω–∞ –¥–ª—è {kv_key}. –°–±—Ä–æ—Å –Ω–∞ 0.")
            current_index = 0

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∏–∑ Vercel KV –¥–ª—è {kv_key}: {e}", exc_info=True)
        current_index = 0 # –ù–∞—á–∏–Ω–∞–µ–º —Å 0 –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —á—Ç–µ–Ω–∏—è

    item_to_return = item_list[current_index]
    next_index = (current_index + 1) % len(item_list) # –í—ã—á–∏—Å–ª—è–µ–º —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å —Å –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ–º

    try:
        await kv.set(kv_key, next_index) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –°–õ–ï–î–£–Æ–©–ò–ô –∏–Ω–¥–µ–∫—Å
        logger.info(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω —Å–ª–µ–¥—É—é—â–∏–π –∏–Ω–¥–µ–∫—Å {next_index} –¥–ª—è {kv_key}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ Vercel KV –¥–ª—è {kv_key}: {e}", exc_info=True)
        # –ù–µ –∫—Ä–∏—Ç–∏—á–Ω–æ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ–∫—É—â–µ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

    return item_to_return


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id: {update.effective_user.id}")
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –í—ã–±–∏—Ä–∞–π!", # –û–±–Ω–æ–≤–∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ
        parse_mode='HTML',
        reply_markup=markup
    )

async def syrup_heart_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –°–õ–ï–î–£–Æ–©–ï–ï '—Å–∏—Ä–æ–ø–Ω–æ–µ' —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ –ø–æ—Ä—è–¥–∫—É."""
    user_id = update.effective_user.id
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º' –æ—Ç user_id: {user_id}")
    try:
        message = await get_next_item(user_id, "syrup", congratulations_list) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        await update.message.reply_text(message, reply_markup=markup)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ '—Å–∏—Ä–æ–ø–Ω–æ–µ' —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id: {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ syrup_heart_handler –¥–ª—è user_id: {user_id}: {e}", exc_info=True)
        try: await update.message.reply_text("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª–∏—Ç—å —Å–∏—Ä–æ–ø–æ–º!", reply_markup=markup)
        except Exception as send_err: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_err}")

async def beauty_image_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –°–õ–ï–î–£–Æ–©–£–Æ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞ –ø–æ –ø–æ—Ä—è–¥–∫—É."""
    user_id = update.effective_user.id
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–°–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤–æ' –æ—Ç user_id: {user_id}")

    if not image_urls:
        logger.error(f"–°–ø–∏—Å–æ–∫ image_urls –ø—É—Å—Ç –¥–ª—è user_id: {user_id}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫—Ä–∞—Å–∏–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å–µ–π—á–∞—Å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.", reply_markup=markup)
        return

    try:
        image_url = await get_next_item(user_id, "beauty_img", image_urls) # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—É—é —Ñ—É–Ω–∫—Ü–∏—é
        logger.info(f"–í—ã–±—Ä–∞–Ω URL –∫–∞—Ä—Ç–∏–Ω–∫–∏: {image_url} –¥–ª—è user_id: {user_id}")

        await update.message.reply_photo(
            photo=image_url,
            caption="–õ–æ–≤–∏ –∫—Ä–∞—Å–æ—Ç—É! ‚ú®",
            reply_markup=markup
            )
        logger.info(f"–ö–∞—Ä—Ç–∏–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id: {user_id}")

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è user_id: {user_id}: {e}", exc_info=True)
        try: await update.message.reply_text("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É!", reply_markup=markup)
        except Exception as send_err: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {send_err}")

# --- –ù–û–í–´–ô –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–•–µ–ø–ø–∏ –±–µ–∑–¥–µ–π" ---
async def happy_birthday_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ file_id –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏."""
    user_id = update.effective_user.id
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–•–µ–ø–ø–∏ –±–µ–∑–¥–µ–π' –æ—Ç user_id: {user_id}")
    if not HAPPY_BIRTHDAY_AUDIO_ID:
        logger.error("HAPPY_BIRTHDAY_AUDIO_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –∫–æ–¥–µ!")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —Ñ–∞–π–ª –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=markup)
        return
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ —Å file_id: {HAPPY_BIRTHDAY_AUDIO_ID} –¥–ª—è user_id: {user_id}")
        await update.message.reply_audio(audio=HAPPY_BIRTHDAY_AUDIO_ID, caption="–° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è! üéâ", reply_markup=markup)
        logger.info(f"–ê—É–¥–∏–æ '–•–µ–ø–ø–∏ –±–µ–∑–¥–µ–π' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id: {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ '–•–µ–ø–ø–∏ –±–µ–∑–¥–µ–π' –¥–ª—è user_id: {user_id}: {e}", exc_info=True)
        try: await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=markup)
        except Exception as send_err: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ HB: {send_err}")
# --- –ö–û–ù–ï–¶ –ù–û–í–û–ì–û –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ ---


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
async def process_one_update(update_data):
    if not TELEGRAM_TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è!")
        return

    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # --- –î–æ–±–∞–≤–ª—è–µ–º –í–°–ï –Ω—É–∂–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
    application.add_handler(CommandHandler("start", start))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º ‚ù§Ô∏è"
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º ‚ù§Ô∏è$'), syrup_heart_handler))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–°–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤–æ ‚ú®"
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–°–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤–æ ‚ú®$'), beauty_image_handler))
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–•–µ–ø–ø–∏ –±–µ–∑–¥–µ–π üéÇ" (–í–ê–ñ–ù–û: —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ Regex —Ç–æ—á–Ω—ã–π!)
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–•–µ–ø–ø–∏ –±–µ–∑–¥–µ–π üéÇ$'), happy_birthday_handler))

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ (start, syrup, beauty, hb) –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    try:
        logger.debug(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è update_id: {update_data.get('update_id')}")
        await application.initialize()
        update = Update.de_json(update_data, application.bot)

        if update.message:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: chat_id={update.message.chat.id}, user_id={update.effective_user.id}, text='{update.message.text}'")
        else:
            logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update}")

        logger.debug(f"–ó–∞–ø—É—Å–∫ process_update –¥–ª—è update_id: {update.update_id}")
        await application.process_update(update)
        logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ shutdown –¥–ª—è update_id: {update.update_id}")
        await application.shutdown()
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è {update_data.get('update_id', 'N/A')}: {e}", exc_info=True)
        if application.initialized:
             try: await application.shutdown()
             except Exception as shutdown_e: logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ shutdown –ø–æ—Å–ª–µ –æ—à–∏–±–∫–∏: {shutdown_e}", exc_info=True)


# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Vercel (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è, –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class handler(BaseHTTPRequestHandler):
    def log_message(self, format, *args):
        logger.info("%s - %s" % (self.address_string(), format % args))
    def do_POST(self):
        logger.info("!!! –í—Ö–æ–¥ –≤ do_POST !!!")
        if not TELEGRAM_TOKEN:
            logger.error("POST: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –≤ do_POST)")
            self.send_response(500); self.end_headers(); self.wfile.write(b"Bot token not configured"); return
        try:
            content_len = int(self.headers.get('Content-Length', 0))
            if content_len == 0:
                 logger.warning("POST: –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞")
                 self.send_response(400); self.end_headers(); self.wfile.write(b"Empty request body"); return
            body_bytes = self.rfile.read(content_len)
            logger.debug(f"POST: –ü–æ–ª—É—á–µ–Ω–æ —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (–±–∞–π—Ç—ã): {body_bytes[:200]}...")
            body_json = json.loads(body_bytes.decode('utf-8'))
            logger.info("POST: JSON –ø–æ–ª—É—á–µ–Ω –∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω")
            asyncio.run(process_one_update(body_json))
            self.send_response(200); self.send_header('Content-type', 'text/plain'); self.end_headers(); self.wfile.write(b"OK")
            logger.info("POST: –û—Ç–≤–µ—Ç 200 OK –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω Telegram.")
        except json.JSONDecodeError as e:
            logger.error("POST: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON.", exc_info=True)
            self.send_response(400); self.end_headers(); self.wfile.write(b"Invalid JSON"); return
        except Exception as e:
            logger.error(f"POST: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ do_POST: {e}", exc_info=True)
            self.send_response(500); self.end_headers(); self.wfile.write(b"Internal Server Error"); return
    def do_GET(self):
        logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω GET-–∑–∞–ø—Ä–æ—Å –∫ /api/webhook")
        self.send_response(200); self.send_header('Content-type', 'text/plain'); self.end_headers()
        self.wfile.write(b"Bot OK (Sequential Messages/Pictures + HB Audio Version)"); return # –û–±–Ω–æ–≤–∏–ª–∏ —Ç–µ–∫—Å—Ç