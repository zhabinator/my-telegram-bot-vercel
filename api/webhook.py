# -*- coding: utf-8 -*-
import os
import asyncio
import json
import logging
import aiohttp
import re

from http.server import BaseHTTPRequestHandler
from urllib.parse import parse_qs

# –ò–º–ø–æ—Ä—Ç—ã –æ—Å—Ç–∞–≤–ª–µ–Ω—ã, —Ö–æ—Ç—è ConversationHandler –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–æ
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler # –û—Å—Ç–∞–≤–ª–µ–Ω –∏–º–ø–æ—Ä—Ç, –Ω–æ —Å–∞–º —Ö–µ–Ω–¥–ª–µ—Ä –æ—Ç–∫–ª—é—á–µ–Ω –Ω–∏–∂–µ
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG # –û—Å—Ç–∞–≤–ª—è–µ–º DEBUG –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω—ã—Ö –ª–æ–≥–æ–≤
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)

# --- –ö–ª—é—á–∏ ---
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
OWM_API_KEY = os.environ.get('OWM_API_KEY') # –û—Å—Ç–∞–≤–ª—è–µ–º, –≤–¥—Ä—É–≥ –Ω—É–∂–µ–Ω –¥–ª—è /weather –ì–æ—Ä–æ–¥

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
reply_keyboard = [
    [KeyboardButton("–®—É—Ç–∫–∞ üé≤"), KeyboardButton("–ü–æ–≥–æ–¥–∞ üå¶Ô∏è")], # –ö–Ω–æ–ø–∫–∞ –ü–æ–≥–æ–¥–∞ –æ—Å—Ç–∞–ª–∞—Å—å, –Ω–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–∏–∞–ª–æ–≥–∞ –æ—Ç–∫–ª—é—á–µ–Ω
    [KeyboardButton("–û –±–æ—Ç–µ ‚ÑπÔ∏è")]
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è (–í–†–ï–ú–ï–ù–ù–û –ù–ï –ò–°–ü–û–õ–¨–ó–£–Æ–¢–°–Ø) ---
# GET_CITY = range(1) # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ, —Ç.–∫. ConversationHandler –æ—Ç–∫–ª—é—á–µ–Ω

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã (–æ—Å—Ç–∞–≤–ª—è–µ–º, –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è /weather –ì–æ—Ä–æ–¥) ---
async def fetch_and_send_weather(update: Update, context: ContextTypes.DEFAULT_TYPE, city_name: str):
    logger.info(f"fetch_and_send_weather: –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è '{city_name}'")
    if not OWM_API_KEY: logger.error("fetch: –ö–ª—é—á OWM –Ω–µ –Ω–∞–π–¥–µ–Ω."); await update.message.reply_text("–ö–ª—é—á –ø–æ–≥–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=markup); return
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ fetch_and_send_weather –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    weather_api_url = f"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={OWM_API_KEY}&units=metric&lang=ru"
    logger.info(f"fetch: URL: {weather_api_url}")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(weather_api_url) as response:
                if response.status == 401: logger.error(f"fetch: 401 OWM –¥–ª—è '{city_name}'."); await update.message.reply_text("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–≥–æ–¥—ã.", reply_markup=markup); return
                if response.status == 404: logger.warning(f"fetch: 404 OWM –¥–ª—è '{city_name}'."); await update.message.reply_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥ '{city_name}'.", reply_markup=markup); return
                response.raise_for_status(); data = await response.json(); logger.info(f"fetch: –û—Ç–≤–µ—Ç OWM: {data}")
        weather_list = data.get("weather", []); main_weather = weather_list[0].get("description", "N/A") if weather_list else "N/A"; main_data = data.get("main", {}); temp = main_data.get("temp", "N/A"); feels_like = main_data.get("feels_like", "N/A"); humidity = main_data.get("humidity", "N/A"); wind_data = data.get("wind", {}); wind_speed = wind_data.get("speed", "N/A"); city_display_name = data.get("name", city_name)
        weather_text = f"–ü–æ–≥–æ–¥–∞ –≤ {city_display_name}:\n–û–ø–∏—Å–∞–Ω–∏–µ: {main_weather.capitalize()}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n–û—â—É—â–∞–µ—Ç—Å—è: {feels_like}¬∞C\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–í–µ—Ç–µ—Ä: {wind_speed} –º/—Å"
        await update.message.reply_text(weather_text, reply_markup=markup)
    except Exception as e: logger.error(f"fetch: –û—à–∏–±–∫–∞ –¥–ª—è '{city_name}': {e}", exc_info=True); await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.", reply_markup=markup)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞ (–æ—Å—Ç–∞–≤–ª—è–µ–º) ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–í—ã–∑–≤–∞–Ω–∞ /start")
    user_name = update.effective_user.first_name or "User"
    await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç, {user_name}! –í—ã–±–µ—Ä–∏:', reply_markup=markup)

async def joke_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É"""
    joke_api_url = "https://official-joke-api.appspot.com/random_joke"
    logger.info(f"–í—ã–∑–≤–∞–Ω–∞ /joke –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ '–®—É—Ç–∫–∞'. –ó–∞–ø—Ä–æ—Å —à—É—Ç–∫–∏ —Å {joke_api_url}")
    # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ joke_command –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(joke_api_url) as response:
                response.raise_for_status()
                data = await response.json()
                logger.info(f"/joke: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API —à—É—Ç–æ–∫: {data}")
        setup = data.get("setup"); punchline = data.get("punchline")
        if setup and punchline: await update.message.reply_text(f"{setup}\n\n{punchline}", reply_markup=markup)
        else: logger.error(f"/joke: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å setup/punchline –∏–∑ –æ—Ç–≤–µ—Ç–∞: {data}"); await update.message.reply_text("–ù–µ–æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à—É—Ç–∫–∏ –ø—Ä–∏—à–µ–ª.", reply_markup=markup)
    except aiohttp.ClientError as e: logger.error(f"/joke: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}", exc_info=True); await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º —à—É—Ç–æ–∫.", reply_markup=markup)
    except json.JSONDecodeError as e: logger.error(f"/joke: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}", exc_info=True); await update.message.reply_text("–°–µ—Ä–≤–µ—Ä —à—É—Ç–æ–∫ –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ–µ.", reply_markup=markup)
    except Exception as e: logger.error(f"/joke: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True); await update.message.reply_text("–û–π, –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ —à—É—Ç–∫–∏.", reply_markup=markup)


async def weather_command_direct(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info("–í—ã–∑–≤–∞–Ω–∞ /weather –ì–æ—Ä–æ–¥")
    city = " ".join(context.args) if context.args else None
    if city: await fetch_and_send_weather(update, context, city)
    else: await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather –ì–æ—Ä–æ–¥", reply_markup=markup)

async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
     logger.info("–í—ã–∑–≤–∞–Ω–∞ –û –±–æ—Ç–µ")
     await update.message.reply_text("–ë–æ—Ç –¥–ª—è —à—É—Ç–æ–∫ –∏ –ø–æ–≥–æ–¥—ã.", reply_markup=markup)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–≥–æ–¥—ã (–í–†–ï–ú–ï–ù–ù–û –ù–ï –ò–°–ü–û–õ–¨–ó–£–Æ–¢–°–Ø) ---
# async def weather_button_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     logger.info("–í—Ö–æ–¥ –≤ –¥–∏–∞–ª–æ–≥ –ø–æ–≥–æ–¥—ã")
#     await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=ReplyKeyboardRemove())
#     return GET_CITY
#
# async def received_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     city=update.message.text
#     logger.info(f"–ü–æ–ª—É—á–µ–Ω –≥–æ—Ä–æ–¥: {city}")
#     await fetch_and_send_weather(update, context, city)
#     return ConversationHandler.END
#
# async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
#     logger.info("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω")
#     await update.message.reply_text('–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup)
#     return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
async def process_one_update(update_data):
    if not TELEGRAM_TOKEN: logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!"); return
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # --- !!! ConversationHandler –í–†–ï–ú–ï–ù–ù–û –û–¢–ö–õ–Æ–ß–ï–ù –î–õ–Ø –î–ò–ê–ì–ù–û–°–¢–ò–ö–ò !!! ---
    # logger.debug("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ ConversationHandler...") # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
    # conv_handler_weather = ConversationHandler( # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
    #     entry_points=[MessageHandler(filters.TEXT & filters.Regex(r'^–ü–æ–≥–æ–¥–∞ üå¶Ô∏è$'), weather_button_entry)], # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
    #     states={GET_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_city)]}, # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
    #     fallbacks=[CommandHandler('cancel', cancel_conversation)] # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
    # ) # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
    # logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ ConversationHandler...") # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
    # application.add_handler(conv_handler_weather) # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
    # --- !!! –ö–û–ù–ï–¶ –û–¢–ö–õ–Æ–ß–ï–ù–ò–Ø !!! ---

    # --- –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ CommandHandler(start)...")
    application.add_handler(CommandHandler("start", start))
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ CommandHandler(joke)...")
    application.add_handler(CommandHandler("joke", joke_command))
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ CommandHandler(weather)...")
    application.add_handler(CommandHandler("weather", weather_command_direct))
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ MessageHandler(–®—É—Ç–∫–∞)...")
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–®—É—Ç–∫–∞ üé≤$'), joke_command))
    logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ MessageHandler(–û –±–æ—Ç–µ)...")
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–û –±–æ—Ç–µ ‚ÑπÔ∏è$'), about_command))

    # --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü–æ–≥–æ–¥–∞" —Ç–µ–ø–µ—Ä—å –Ω–µ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å, —Ç.–∫. –æ–Ω –≤–µ–ª –≤ –æ—Ç–∫–ª—é—á–µ–Ω–Ω—ã–π ConversationHandler ---
    # --- –û—Ç–¥–µ–ª—å–Ω—ã–π /cancel —Ç–æ–∂–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –Ω—É–∂–µ–Ω ---
    # logger.debug("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ CommandHandler(cancel)...") # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ
    # application.add_handler(CommandHandler('cancel', cancel_conversation)) # –ó–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–æ

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã (–ë–ï–ó ConversationHandler).")
    try:
        logger.debug(f"–ò–Ω–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {update_data.get('update_id')}")
        await application.initialize()
        update = Update.de_json(update_data, application.bot)
        # –õ–æ–≥–≥–∏—Ä—É–µ–º –≤—Ö–æ–¥—è—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        if update.message: logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: type={update.message.chat.type}, text='{update.message.text}'")
        elif update.callback_query: logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: data='{update.callback_query.data}'")
        else: logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update}")
        logger.debug(f"–ó–∞–ø—É—Å–∫ process_update –¥–ª—è {update.update_id}")
        await application.process_update(update) # <- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
        logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ shutdown –¥–ª—è {update.update_id}")
        await application.shutdown()
    except Exception as e: logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ {update_data.get('update_id', 'N/A')}: {e}", exc_info=True); await application.shutdown() if application.initialized else None

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Vercel (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---
class handler(BaseHTTPRequestHandler):
    def log_message(self, format, *args): logger.info("%s - %s" % (self.address_string(), format % args))
    def do_POST(self): logger.info("!!! –í—Ö–æ–¥ –≤ do_POST !!!"); # ... (–æ—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ do_POST –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...
        if not TELEGRAM_TOKEN: logger.error("POST: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"); self.send_response(500); self.end_headers(); self.wfile.write(b"Token error"); return
        try:
            content_len = int(self.headers.get('Content-Length', 0)); body_bytes = self.rfile.read(content_len)
            if content_len == 0: logger.warning("POST: –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ"); self.send_response(400); self.end_headers(); self.wfile.write(b"Empty body"); return
            body_json = json.loads(body_bytes.decode('utf-8')); logger.info("POST: JSON –ø–æ–ª—É—á–µ–Ω")
            asyncio.run(process_one_update(body_json))
            self.send_response(200); self.send_header('Content-type', 'text/plain'); self.end_headers(); self.wfile.write(b"OK"); logger.info("POST: –û—Ç–≤–µ—Ç 200 OK")
        except json.JSONDecodeError: logger.error("POST: –û—à–∏–±–∫–∞ JSON", exc_info=True); self.send_response(400); self.end_headers(); self.wfile.write(b"Invalid JSON"); return
        except Exception as e: logger.error(f"POST: –û—à–∏–±–∫–∞ –≤ do_POST: {e}", exc_info=True); self.send_response(500); self.end_headers(); self.wfile.write(b"Internal Error"); return
    def do_GET(self): logger.info("GET /api/webhook"); self.send_response(200); self.send_header('Content-type', 'text/plain'); self.end_headers(); self.wfile.write(b"Bot OK"); return