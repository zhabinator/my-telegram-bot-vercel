# -*- coding: utf-8 -*-
import os
import asyncio
import json
import logging
import random

from http.server import BaseHTTPRequestHandler

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO # INFO –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ, —Ç.–∫. –∏—Å–ø–æ–ª—å–∑—É–µ–º CRITICAL –¥–ª—è ID
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING)

# --- –ö–ª—é—á Telegram ---
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
if not TELEGRAM_TOKEN:
    logger.critical("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è TELEGRAM_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

# --- –°–ø–∏—Å–æ–∫ –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–π ---
congratulations_list = [
    "–ë—É–¥—Ç—å –≤—Å–µ–≥–¥–∞ very sugarüéâ", "–¢—ã - –ª–æ–≤—É—à–∫–∞ –¥–ª—è –º—É–∂—Å–∫–æ–≥–æ –í–∞—É! üíñ", "–ì–ª–∞–≤–Ω–∞—è —Å—Ç–∞—Ç—å—è –≤ –∫–æ–¥–µ–∫—Å–µ –∫—Ä–∞—Å–æ—Ç—ã ü•≥",
    "–¢—ã –¥–µ–ª–∞–µ—à—å –∞–ø–ø–µ—Ç–∏—Ç –ø—Ä–∏—è—Ç–Ω–µ–µ ‚ú®", "–ê—Ä–æ–º–∞—Ç–Ω–æ–≥–æ –¥–Ω—è, –º–∏–ª–µ–¥–∏ü•∞", "–†—è–¥–æ–º —Å –≤–∞–º–∏ –Ω–µ —Ö–æ—á–µ—Ç—Å—è –º–æ—Ä–≥–∞—Ç—åü•∞",
    "–ï—Å–ª–∏ –∫—Ä–∞—Å–æ—Ç–∞ —Å–ø–∞—Å–µ—Ç –º–∏—Ä, —Ç–æ –≤—Å—è –Ω–∞–¥–µ–∂–¥–∞ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ç–µ–±—è!ü•∞", "–¶–µ–ª—É–µ–º —Ç–æ—Ç –¥–µ–Ω—å, –∫–æ–≥–¥–∞ —Ç—ã —Ä–æ–¥–∏–ª–∞—Å—å!üíñ",
    "–ú–æ—Ä–µ —É–¥–∞—á–∏ –∏ –¥–∞—á–∏ —É –º–æ—Ä—è! üíñ",
]

# --- –°–ø–∏—Å–æ–∫ URL –∫–∞—Ä—Ç–∏–Ω–æ–∫ ---
image_urls = [
    "https://i.imgur.com/P14dISY.jpeg", "https://i.imgur.com/SrFv5sw.jpeg", "https://i.imgur.com/UjL4C4Q.jpeg",
    "https://i.imgur.com/exIooZ0.jpeg", "https://i.imgur.com/Hqe3MOI.jpeg", "https://i.imgur.com/xEsRHUU.jpeg"
]
if not image_urls: logger.warning("–°–ø–∏—Å–æ–∫ image_urls –ø—É—Å—Ç!")

# --- ID –ê—É–¥–∏–æ—Ñ–∞–π–ª–∞ (–ü–æ–∫–∞ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç–∞—Ä—ã–π, –≤—ã –µ–≥–æ –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–æ–≤—ã–º –ø–æ–∑–∂–µ) ---
HAPPY_BIRTHDAY_AUDIO_ID = "CQACAgIAAxkBAAEeFGVoDgLIaXacb0EQl_xL-M7bDs5ENwACwnAAAp1ncEhC4mDMqXl-wjYE" # –ó–ê–ú–ï–ù–ò–¢–ï –≠–¢–û –ü–û–ó–ñ–ï

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
reply_keyboard = [
    [KeyboardButton("–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º ‚ù§Ô∏è"), KeyboardButton("–°–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤–æ ‚ú®")],
    [KeyboardButton("–•–µ–ø–ø–∏ –±–µ–∑–¥–µ–π üéÇ")]
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True, one_time_keyboard=False)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É."""
    logger.info(f"–ö–æ–º–∞–Ω–¥–∞ /start –æ—Ç user_id: {update.effective_user.id}")
    user = update.effective_user
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç, {user.mention_html()}! –í—ã–±–∏—Ä–∞–π!",
        parse_mode='HTML',
        reply_markup=markup
    )

async def syrup_heart_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –°–õ–£–ß–ê–ô–ù–û–ï '—Å–∏—Ä–æ–ø–Ω–æ–µ' —Å–æ–æ–±—â–µ–Ω–∏–µ."""
    user_id = update.effective_user.id
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º' –æ—Ç user_id: {user_id}")
    try:
        if not congratulations_list:
             logger.warning("–°–ø–∏—Å–æ–∫ congratulations_list –ø—É—Å—Ç!")
             await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å.", reply_markup=markup)
             return
        message = random.choice(congratulations_list)
        await update.message.reply_text(message, reply_markup=markup)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–ª—É—á–∞–π–Ω–æ–µ '—Å–∏—Ä–æ–ø–Ω–æ–µ' —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è user_id: {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ syrup_heart_handler –¥–ª—è user_id: {user_id}: {e}", exc_info=True)
        try: await update.message.reply_text("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –ø–æ–ª–∏—Ç—å —Å–∏—Ä–æ–ø–æ–º!", reply_markup=markup)
        except Exception as send_err: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ: {send_err}")

async def beauty_image_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –°–õ–£–ß–ê–ô–ù–£–Æ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏–∑ —Å–ø–∏—Å–∫–∞."""
    user_id = update.effective_user.id
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–°–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤–æ' –æ—Ç user_id: {user_id}")
    if not image_urls:
        logger.error(f"–°–ø–∏—Å–æ–∫ image_urls –ø—É—Å—Ç –¥–ª—è user_id: {user_id}")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏—Ç–µ, –∫—Ä–∞—Å–∏–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏ —Å–µ–π—á–∞—Å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.", reply_markup=markup)
        return
    try:
        image_url = random.choice(image_urls)
        logger.info(f"–í—ã–±—Ä–∞–Ω —Å–ª—É—á–∞–π–Ω—ã–π URL –∫–∞—Ä—Ç–∏–Ω–∫–∏: {image_url} –¥–ª—è user_id: {user_id}")
        await update.message.reply_photo(
            photo=image_url, caption="–õ–æ–≤–∏ –∫—Ä–∞—Å–æ—Ç—É! ‚ú®", reply_markup=markup
            )
        logger.info(f"–°–ª—É—á–∞–π–Ω–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –¥–ª—è user_id: {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ñ–æ—Ç–æ –¥–ª—è user_id: {user_id}: {e}", exc_info=True)
        try: await update.message.reply_text("–û–π, –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É!", reply_markup=markup)
        except Exception as send_err: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ: {send_err}")

async def happy_birthday_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∞—É–¥–∏–æ—Ñ–∞–π–ª –ø–æ file_id –ø—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –∫–Ω–æ–ø–∫–∏."""
    user_id = update.effective_user.id
    logger.info(f"–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ '–•–µ–ø–ø–∏ –±–µ–∑–¥–µ–π' –æ—Ç user_id: {user_id}")
    if not HAPPY_BIRTHDAY_AUDIO_ID:
        logger.error("HAPPY_BIRTHDAY_AUDIO_ID –Ω–µ –∑–∞–¥–∞–Ω –≤ –∫–æ–¥–µ!")
        await update.message.reply_text("–ò–∑–≤–∏–Ω–∏, —Ñ–∞–π–ª –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–π—á–∞—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.", reply_markup=markup)
        return
    try:
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∞—É–¥–∏–æ —Å file_id: {HAPPY_BIRTHDAY_AUDIO_ID} –¥–ª—è user_id: {user_id}")
        await update.message.reply_audio(audio=HAPPY_BIRTHDAY_AUDIO_ID, caption="–° –î–Ω–µ–º –†–æ–∂–¥–µ–Ω–∏—è! üéâ", reply_markup=markup)
        logger.info(f"–ê—É–¥–∏–æ '–•–µ–ø–ø–∏ –±–µ–∑–¥–µ–π' —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ user_id: {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∞—É–¥–∏–æ '–•–µ–ø–ø–∏ –±–µ–∑–¥–µ–π' –¥–ª—è user_id: {user_id}: {e}", exc_info=True)
        try: await update.message.reply_text("–ù–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–æ–∑–¥—Ä–∞–≤–ª–µ–Ω–∏–µ. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=markup)
        except Exception as send_err: logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∞—É–¥–∏–æ HB: {send_err}")

# !!! –í–†–ï–ú–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –õ–û–ì–ì–ò–†–û–í–ê–ù–ò–Ø ID –ê–£–î–ò–û !!!
async def log_received_audio(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–õ–æ–≥–≥–∏—Ä—É–µ—Ç file_id –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∞—É–¥–∏–æ –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é."""
    if update.message and update.message.audio:
        audio = update.message.audio
        the_file_id = audio.file_id
        # –í—ã–≤–æ–¥–∏–º –≤ –ª–æ–≥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ú —É—Ä–æ–≤–Ω–µ–º, —á—Ç–æ–±—ã —Ç–æ—á–Ω–æ –∑–∞–º–µ—Ç–∏—Ç—å
        logger.critical(f"--- !!! –ü–û–õ–£–ß–ï–ù AUDIO FILE ID: {the_file_id} !!! ---")
        # –û—Ç–≤–µ—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –±—ã–ª–æ –≤–∏–¥–Ω–æ –∏ –≤ —á–∞—Ç–µ
        await update.message.reply_text(f"Audio ID –ø–æ–ª—É—á–µ–Ω:\n\n`{the_file_id}`\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç ID.", parse_mode='MarkdownV2')
    else:
        logger.warning("log_received_audio –≤—ã–∑–≤–∞–Ω –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–µ–∑ –∞—É–¥–∏–æ.")
# !!! –ö–û–ù–ï–¶ –í–†–ï–ú–ï–ù–ù–û–ô –§–£–ù–ö–¶–ò–ò !!!


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
async def process_one_update(update_data):
    if not TELEGRAM_TOKEN: logger.error("–ù–µ—Ç —Ç–æ–∫–µ–Ω–∞!"); return
    application = Application.builder().token(TELEGRAM_TOKEN).build()

    # !!! –î–û–ë–ê–í–õ–Ø–ï–ú –í–†–ï–ú–ï–ù–ù–´–ô –û–ë–†–ê–ë–û–¢–ß–ò–ö –ê–£–î–ò–û –ü–ï–†–í–´–ú !!!
    application.add_handler(MessageHandler(filters.AUDIO, log_received_audio))
    # ---------------------------------------------

    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–ü–æ–ª–∏—Ç—å —Å–µ—Ä–¥–µ—á–∫–æ —Å–∏—Ä–æ–ø–æ–º ‚ù§Ô∏è$'), syrup_heart_handler))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–°–¥–µ–ª–∞–π –∫—Ä–∞—Å–∏–≤–æ ‚ú®$'), beauty_image_handler))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–•–µ–ø–ø–∏ –±–µ–∑–¥–µ–π üéÇ$'), happy_birthday_handler))

    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã (–í–ö–õ–Æ–ß–ê–Ø –õ–û–ì –ê–£–î–ò–û).")
    try:
        logger.debug("Init app...")
        await application.initialize()
        update = Update.de_json(update_data, application.bot)
        if update.message: logger.info(f"Msg rcvd: u={update.effective_user.id}, t='{update.message.text}'")
        else: logger.info(f"Update rcvd: {update}")
        logger.debug("Processing update...")
        await application.process_update(update)
        logger.debug("Shutdown app...")
        await application.shutdown()
    except Exception as e: logger.error(f"Critical error: {e}", exc_info=True); # ... (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–∫–∏ shutdown) ...

# --- –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Vercel (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è) ---
class handler(BaseHTTPRequestHandler):
    def log_message(self, format, *args): logger.info("%s - %s" % (self.address_string(), format % args))
    def do_POST(self): # ... (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–¥ do_POST) ...
        logger.info("!!! –í—Ö–æ–¥ –≤ do_POST !!!")
        if not TELEGRAM_TOKEN: logger.error("POST: –¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω"); self.send_response(500); self.end_headers(); self.wfile.write(b"Bot token not configured"); return
        try:
            content_len = int(self.headers.get('Content-Length', 0))
            if content_len == 0: logger.warning("POST: –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ"); self.send_response(400); self.end_headers(); self.wfile.write(b"Empty body"); return
            body_bytes = self.rfile.read(content_len)
            logger.debug(f"POST: –¢–µ–ª–æ: {body_bytes[:200]}...")
            body_json = json.loads(body_bytes.decode('utf-8'))
            logger.info("POST: JSON –ø–æ–ª—É—á–µ–Ω")
            asyncio.run(process_one_update(body_json))
            self.send_response(200); self.send_header('Content-type', 'text/plain'); self.end_headers(); self.wfile.write(b"OK")
            logger.info("POST: –û—Ç–≤–µ—Ç 200 OK")
        except json.JSONDecodeError as e: logger.error("POST: –û—à–∏–±–∫–∞ JSON", exc_info=True); self.send_response(400); self.end_headers(); self.wfile.write(b"Invalid JSON"); return
        except Exception as e: logger.error(f"POST: –û—à–∏–±–∫–∞ –≤ do_POST: {e}", exc_info=True); self.send_response(500); self.end_headers(); self.wfile.write(b"Internal Error"); return
    def do_GET(self): # ... (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∫–æ–¥ do_GET) ...
        logger.info("GET /api/webhook")
        self.send_response(200); self.send_header('Content-type', 'text/plain'); self.end_headers()
        self.wfile.write(b"Bot OK (Audio ID Logging Active)"); return # –ü–æ–º–µ–Ω—è–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª—è GET