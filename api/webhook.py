# -*- coding: utf-8 -*-
import os
import asyncio
import json
import logging
import aiohttp
import re

from http.server import BaseHTTPRequestHandler
from urllib.parse import parse_qs

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è (–æ—Å—Ç–∞–≤–ª—è–µ–º DEBUG –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏)
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.DEBUG
)
logger = logging.getLogger(__name__)
logging.getLogger("httpx").setLevel(logging.WARNING) # –ü–æ–¥–∞–≤–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏ httpx

# --- –ö–ª—é—á–∏ ---
TELEGRAM_TOKEN = os.environ.get('TELEGRAM_TOKEN')
OWM_API_KEY = os.environ.get('OWM_API_KEY')

# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ---
reply_keyboard = [
    [KeyboardButton("–®—É—Ç–∫–∞ üé≤"), KeyboardButton("–ü–æ–≥–æ–¥–∞ üå¶Ô∏è")],
    [KeyboardButton("–û –±–æ—Ç–µ ‚ÑπÔ∏è")]
]
markup = ReplyKeyboardMarkup(reply_keyboard, resize_keyboard=True)

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è ---
GET_CITY = range(1)

# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–≥–æ–¥—ã ---
async def fetch_and_send_weather(update: Update, context: ContextTypes.DEFAULT_TYPE, city_name: str):
    logger.info(f"fetch_and_send_weather: –ó–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã –¥–ª—è '{city_name}'")
    if not OWM_API_KEY: logger.error("fetch: –ö–ª—é—á OWM –Ω–µ –Ω–∞–π–¥–µ–Ω."); await update.message.reply_text("–ö–ª—é—á –ø–æ–≥–æ–¥—ã –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω.", reply_markup=markup); return
    weather_api_url = f"http://api.openweathermap.org/data/2.5/weather?q={city_name}&appid={OWM_API_KEY}&units=metric&lang=ru"
    logger.info(f"fetch: URL: {weather_api_url}")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(weather_api_url) as response:
                if response.status == 401: logger.error(f"fetch: 401 OWM –¥–ª—è '{city_name}'."); await update.message.reply_text("–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ–≥–æ–¥—ã.", reply_markup=markup); return
                if response.status == 404: logger.warning(f"fetch: 404 OWM –¥–ª—è '{city_name}'."); await update.message.reply_text(f"–ù–µ –Ω–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥ '{city_name}'.", reply_markup=markup); return
                response.raise_for_status(); data = await response.json(); logger.info(f"fetch: –û—Ç–≤–µ—Ç OWM: {data}")
        weather_list = data.get("weather", []); main_weather = weather_list[0].get("description", "N/A") if weather_list else "N/A"; main_data = data.get("main", {}); temp = main_data.get("temp", "N/A"); feels_like = main_data.get("feels_like", "N/A"); humidity = main_data.get("humidity", "N/A"); wind_data = data.get("wind", {}); wind_speed = wind_data.get("speed", "N/A"); city_display_name = data.get("name", city_name)
        weather_text = f"–ü–æ–≥–æ–¥–∞ –≤ {city_display_name}:\n–û–ø–∏—Å–∞–Ω–∏–µ: {main_weather.capitalize()}\n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C\n–û—â—É—â–∞–µ—Ç—Å—è: {feels_like}¬∞C\n–í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n–í–µ—Ç–µ—Ä: {wind_speed} –º/—Å"
        await update.message.reply_text(weather_text, reply_markup=markup)
    except Exception as e: logger.error(f"fetch: –û—à–∏–±–∫–∞ –¥–ª—è '{city_name}': {e}", exc_info=True); await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–≥–æ–¥—ã.", reply_markup=markup)

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤–Ω–µ –¥–∏–∞–ª–æ–≥–∞ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE): logger.info("–í—ã–∑–≤–∞–Ω–∞ /start"); user_name = update.effective_user.first_name or "User"; await update.message.reply_text(f'–ü—Ä–∏–≤–µ—Ç, {user_name}! –í—ã–±–µ—Ä–∏:', reply_markup=markup)

async def joke_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
    joke_api_url = "https://official-joke-api.appspot.com/random_joke"
    logger.info(f"–í—ã–∑–≤–∞–Ω–∞ /joke –∏–ª–∏ –∫–Ω–æ–ø–∫–∞ '–®—É—Ç–∫–∞'. –ó–∞–ø—Ä–æ—Å —à—É—Ç–∫–∏ —Å {joke_api_url}")
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(joke_api_url) as response:
                response.raise_for_status()
                data = await response.json()
                logger.info(f"/joke: –ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç API —à—É—Ç–æ–∫: {data}")
        setup = data.get("setup")
        punchline = data.get("punchline")
        if setup and punchline:
            joke_text = f"{setup}\n\n{punchline}"
            await update.message.reply_text(joke_text, reply_markup=markup)
        else:
            logger.error(f"/joke: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å setup/punchline –∏–∑ –æ—Ç–≤–µ—Ç–∞: {data}")
            await update.message.reply_text("–ù–µ–æ–±—ã—á–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —à—É—Ç–∫–∏ –ø—Ä–∏—à–µ–ª. –ü–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑!", reply_markup=markup)
    except aiohttp.ClientError as e: logger.error(f"/joke: –û—à–∏–±–∫–∞ —Å–µ—Ç–∏: {e}", exc_info=True); await update.message.reply_text("–ù–µ —Å–º–æ–≥ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º —à—É—Ç–æ–∫.", reply_markup=markup)
    except json.JSONDecodeError as e: logger.error(f"/joke: –û—à–∏–±–∫–∞ JSON: {e}", exc_info=True); await update.message.reply_text("–°–µ—Ä–≤–µ—Ä —à—É—Ç–æ–∫ –æ—Ç–≤–µ—Ç–∏–ª –Ω–µ–ø–æ–Ω—è—Ç–Ω–æ.", reply_markup=markup)
    except Exception as e: logger.error(f"/joke: –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}", exc_info=True); await update.message.reply_text("–û–π, –Ω–µ –≤—ã—à–ª–æ –ø–æ—à—É—Ç–∏—Ç—å.", reply_markup=markup)

async def weather_command_direct(update: Update, context: ContextTypes.DEFAULT_TYPE): logger.info("–í—ã–∑–≤–∞–Ω–∞ /weather –ì–æ—Ä–æ–¥"); city = " ".join(context.args) if context.args else None; await fetch_and_send_weather(update, context, city) if city else await update.message.reply_text("–£–∫–∞–∂–∏—Ç–µ –≥–æ—Ä–æ–¥: /weather –ì–æ—Ä–æ–¥", reply_markup=markup)
async def about_command(update: Update, context: ContextTypes.DEFAULT_TYPE): logger.info("–í—ã–∑–≤–∞–Ω–∞ –û –±–æ—Ç–µ"); await update.message.reply_text("–ë–æ—Ç –¥–ª—è —à—É—Ç–æ–∫ –∏ –ø–æ–≥–æ–¥—ã.", reply_markup=markup)

# --- –§—É–Ω–∫—Ü–∏–∏ –¥–∏–∞–ª–æ–≥–∞ –ø–æ–≥–æ–¥—ã ---
async def weather_button_entry(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int: logger.info("–í—Ö–æ–¥ –≤ –¥–∏–∞–ª–æ–≥ –ø–æ–≥–æ–¥—ã"); await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≥–æ—Ä–æ–¥:", reply_markup=ReplyKeyboardRemove()); return GET_CITY
async def received_city(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int: city=update.message.text; logger.info(f"–ü–æ–ª—É—á–µ–Ω –≥–æ—Ä–æ–¥: {city}"); await fetch_and_send_weather(update, context, city); return ConversationHandler.END
async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int: logger.info("–î–∏–∞–ª–æ–≥ –æ—Ç–º–µ–Ω–µ–Ω"); await update.message.reply_text('–û—Ç–º–µ–Ω–µ–Ω–æ.', reply_markup=markup); return ConversationHandler.END

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ---
async def process_one_update(update_data):
    if not TELEGRAM_TOKEN: logger.error("–¢–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω!"); return
    application = Application.builder().token(TELEGRAM_TOKEN).build()
    conv_handler_weather = ConversationHandler(entry_points=[MessageHandler(filters.TEXT & filters.Regex(r'^–ü–æ–≥–æ–¥–∞ üå¶Ô∏è$'), weather_button_entry)], states={GET_CITY: [MessageHandler(filters.TEXT & ~filters.COMMAND, received_city)]}, fallbacks=[CommandHandler('cancel', cancel_conversation)])
    application.add_handler(conv_handler_weather)
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("joke", joke_command))
    application.add_handler(CommandHandler("weather", weather_command_direct))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–®—É—Ç–∫–∞ üé≤$'), joke_command))
    application.add_handler(MessageHandler(filters.TEXT & filters.Regex(r'^–û –±–æ—Ç–µ ‚ÑπÔ∏è$'), about_command))
    application.add_handler(CommandHandler('cancel', cancel_conversation))
    logger.info("–û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã.")
    try:
        logger.debug(f"–ò–Ω–∏—Ç –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è {update_data.get('update_id')}")
        await application.initialize()
        update = Update.de_json(update_data, application.bot)
        if update.message: logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: type={update.message.chat.type}, text='{update.message.text}'")
        elif update.callback_query: logger.info(f"–ü–æ–ª—É—á–µ–Ω callback_query: data='{update.callback_query.data}'")
        else: logger.info(f"–ü–æ–ª—É—á–µ–Ω –¥—Ä—É–≥–æ–π —Ç–∏–ø –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {update}")
        logger.debug(f"–ó–∞–ø—É—Å–∫ process_update –¥–ª—è {update.update_id}")
        await application.process_update(update)
        logger.debug(f"–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ shutdown –¥–ª—è {update.update_id}")
        await application.shutdown()
    except Exception as e: logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ {update_data.get('update_id', 'N/A')}: {e}", exc_info=True); await application.shutdown() if application.initialized else None

# --- !!! –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –¢–û–ß–ö–ê –í–•–û–î–ê Vercel !!! ---
class handler(BaseHTTPRequestHandler):

    def log_message(self, format, *args):
          # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞—à –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã–π –ª–æ–≥–≥–µ—Ä –≤–º–µ—Å—Ç–æ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ
          logger.info("%s - %s" % (self.address_string(), format % args))

    def do_POST(self):
        # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ POST-–∑–∞–ø—Ä–æ—Å–∞
        logger.info("!!! –í—Ö–æ–¥ –≤ do_POST !!!")

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ç–æ–∫–µ–Ω–∞ (–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ —Å–∫—Ä–∏–ø—Ç–∞)
        if not TELEGRAM_TOKEN:
            logger.error("POST-–∑–∞–ø—Ä–æ—Å: TELEGRAM_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –æ–∫—Ä—É–∂–µ–Ω–∏–∏.")
            self.send_response(500)
            self.end_headers()
            self.wfile.write(b"Bot configuration error: Token missing.")
            return
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–ª–∏–Ω—É —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            content_len = int(self.headers.get('Content-Length', 0))
            if content_len == 0:
                 logger.warning("POST-–∑–∞–ø—Ä–æ—Å: –ü—É—Å—Ç–æ–µ —Ç–µ–ª–æ (Content-Length: 0).")
                 self.send_response(400)
                 self.end_headers()
                 self.wfile.write(b"Empty request body")
                 return

            # –ß–∏—Ç–∞–µ–º –∏ –¥–µ–∫–æ–¥–∏—Ä—É–µ–º —Ç–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞ (JSON –æ—Ç Telegram)
            body_bytes = self.rfile.read(content_len)
            body_json = json.loads(body_bytes.decode('utf-8'))
            logger.info("POST-–∑–∞–ø—Ä–æ—Å: JSON –ø–æ–ª—É—á–µ–Ω –∏ —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω.")

            # –ó–∞–ø—É—Å–∫–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –æ–±—Ä–∞–±–æ—Ç–∫—É –æ–¥–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
            asyncio.run(process_one_update(body_json))

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º Telegram –æ—Ç–≤–µ—Ç OK
            self.send_response(200)
            self.send_header('Content-type', 'text/plain')
            self.end_headers()
            self.wfile.write(b"OK")
            logger.info("POST-–∑–∞–ø—Ä–æ—Å: –û—Ç–≤–µ—Ç 200 OK –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram.")

        except json.JSONDecodeError:
            # –û—à–∏–±–∫–∞, –µ—Å–ª–∏ Telegram –ø—Ä–∏—Å–ª–∞–ª –Ω–µ–≤–∞–ª–∏–¥–Ω—ã–π JSON
            logger.error("POST-–∑–∞–ø—Ä–æ—Å: –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON.", exc_info=True)
            self.send_response(400)
            self.end_headers()
            self.wfile.write(b"Invalid JSON received")
            return # –í–∞–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å
        except Exception as e:
            # –õ–æ–≤–∏–º –ª—é–±—ã–µ –¥—Ä—É–≥–∏–µ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–µ –æ—à–∏–±–∫–∏ –≤ —ç—Ç–æ–º —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–º –±–ª–æ–∫–µ
            logger.error(f"POST-–∑–∞–ø—Ä–æ—Å: –ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ do_POST: {e}", exc_info=True)
            self.send_response(500)
            self.end_headers()
            self.wfile.write(b"Internal Server Error occurred")
            return # –í–∞–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–¥–µ—Å—å

    def do_GET(self):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ GET-–∑–∞–ø—Ä–æ—Å–æ–≤ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
        logger.info("–û–±—Ä–∞–±–æ—Ç–∞–Ω GET-–∑–∞–ø—Ä–æ—Å –∫ /api/webhook")
        self.send_response(200)
        self.send_header('Content-type', 'text/plain')
        self.end_headers()
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–π—Ç—ã, –∑–∞–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤ utf-8
        self.wfile.write(b"Hello! Telegram Bot webhook endpoint is active.")
# --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ù–û–ô –¢–û–ß–ö–ò –í–•–û–î–ê ---